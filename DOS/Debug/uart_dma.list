
uart_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001e2c  08001e2c  00011e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001eac  08001eac  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001eac  08001eac  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001eac  08001eac  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001eac  08001eac  00011eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001eb0  08001eb0  00011eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000005c  08001f10  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08001f10  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004023  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000160b  00000000  00000000  000240eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000570  00000000  00000000  000256f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003f1  00000000  00000000  00025c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000171b2  00000000  00000000  00026059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007fa8  00000000  00000000  0003d20b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f7d1  00000000  00000000  000451b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000015b8  00000000  00000000  000c4984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000c5f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e14 	.word	0x08001e14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08001e14 	.word	0x08001e14

0800014c <taskFunction1>:

Semaphore_t* smpforcount1;

Mutex_t* mutex1;

void taskFunction1(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

//	smpforcount1 = SMP_create(SMP_COUNTING, 2);
	mutex1 = Mutex_create();
 8000150:	f001 fcb0 	bl	8001ab4 <Mutex_create>
 8000154:	4603      	mov	r3, r0
 8000156:	4a12      	ldr	r2, [pc, #72]	; (80001a0 <taskFunction1+0x54>)
 8000158:	6013      	str	r3, [r2, #0]
    while (1) {
        // Code của task 1
//    	SMP_Take(smpforcount1);
    	Mutex_Take(mutex1);
 800015a:	4b11      	ldr	r3, [pc, #68]	; (80001a0 <taskFunction1+0x54>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4618      	mov	r0, r3
 8000160:	f001 fcc0 	bl	8001ae4 <Mutex_Take>
    	while( 1)
    	{

    		if(++ count1 == 10000)
 8000164:	4b0f      	ldr	r3, [pc, #60]	; (80001a4 <taskFunction1+0x58>)
 8000166:	881b      	ldrh	r3, [r3, #0]
 8000168:	3301      	adds	r3, #1
 800016a:	b29a      	uxth	r2, r3
 800016c:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <taskFunction1+0x58>)
 800016e:	801a      	strh	r2, [r3, #0]
 8000170:	4b0c      	ldr	r3, [pc, #48]	; (80001a4 <taskFunction1+0x58>)
 8000172:	881b      	ldrh	r3, [r3, #0]
 8000174:	f242 7210 	movw	r2, #10000	; 0x2710
 8000178:	4293      	cmp	r3, r2
 800017a:	d103      	bne.n	8000184 <taskFunction1+0x38>
    		{
    			count1 = 0;
 800017c:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <taskFunction1+0x58>)
 800017e:	2200      	movs	r2, #0
 8000180:	801a      	strh	r2, [r3, #0]
    			break;
 8000182:	e003      	b.n	800018c <taskFunction1+0x40>
    		}

			task_sleep(1);
 8000184:	2001      	movs	r0, #1
 8000186:	f001 fc3b 	bl	8001a00 <task_sleep>
    		if(++ count1 == 10000)
 800018a:	e7eb      	b.n	8000164 <taskFunction1+0x18>
    	}
//    	SMP_Give(smpforcount1);
    	Mutex_Give(mutex1);
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <taskFunction1+0x54>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4618      	mov	r0, r3
 8000192:	f001 fccd 	bl	8001b30 <Mutex_Give>
    	task_sleep(1);
 8000196:	2001      	movs	r0, #1
 8000198:	f001 fc32 	bl	8001a00 <task_sleep>
    	Mutex_Take(mutex1);
 800019c:	e7dd      	b.n	800015a <taskFunction1+0xe>
 800019e:	bf00      	nop
 80001a0:	20000098 	.word	0x20000098
 80001a4:	2000008c 	.word	0x2000008c

080001a8 <taskFunction2>:
    }
}

void taskFunction2(void) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0


    while (1) {

    	Mutex_Take(mutex1);
 80001ac:	4b10      	ldr	r3, [pc, #64]	; (80001f0 <taskFunction2+0x48>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4618      	mov	r0, r3
 80001b2:	f001 fc97 	bl	8001ae4 <Mutex_Take>
    	while(1)
    	{
//    		SMP_Give(smpforcount1);
//    		DOS_TaskResume(Task5_handle);
    		if(++ count2 == 1000)
 80001b6:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <taskFunction2+0x4c>)
 80001b8:	881b      	ldrh	r3, [r3, #0]
 80001ba:	3301      	adds	r3, #1
 80001bc:	b29a      	uxth	r2, r3
 80001be:	4b0d      	ldr	r3, [pc, #52]	; (80001f4 <taskFunction2+0x4c>)
 80001c0:	801a      	strh	r2, [r3, #0]
 80001c2:	4b0c      	ldr	r3, [pc, #48]	; (80001f4 <taskFunction2+0x4c>)
 80001c4:	881b      	ldrh	r3, [r3, #0]
 80001c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001ca:	d103      	bne.n	80001d4 <taskFunction2+0x2c>
    		{
    			count2 = 0;
 80001cc:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <taskFunction2+0x4c>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	801a      	strh	r2, [r3, #0]
    			break;
 80001d2:	e003      	b.n	80001dc <taskFunction2+0x34>
    		}

    		task_sleep(1);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f001 fc13 	bl	8001a00 <task_sleep>
    		if(++ count2 == 1000)
 80001da:	e7ec      	b.n	80001b6 <taskFunction2+0xe>
    	}
        // Code của task 2
    	Mutex_Give(mutex1);
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <taskFunction2+0x48>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f001 fca5 	bl	8001b30 <Mutex_Give>

    	task_sleep(1);
 80001e6:	2001      	movs	r0, #1
 80001e8:	f001 fc0a 	bl	8001a00 <task_sleep>
    	Mutex_Take(mutex1);
 80001ec:	e7de      	b.n	80001ac <taskFunction2+0x4>
 80001ee:	bf00      	nop
 80001f0:	20000098 	.word	0x20000098
 80001f4:	2000008e 	.word	0x2000008e

080001f8 <taskFunction3>:
    }
}

void taskFunction3(void) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0

    while (1) {
        // Code của task 1
//    	SMP_Take(smpforcount1);
    	Mutex_Take(mutex1);
 80001fc:	4b10      	ldr	r3, [pc, #64]	; (8000240 <taskFunction3+0x48>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4618      	mov	r0, r3
 8000202:	f001 fc6f 	bl	8001ae4 <Mutex_Take>
    	while(1)
		{
    		if( ++ count3 >= 500)
 8000206:	4b0f      	ldr	r3, [pc, #60]	; (8000244 <taskFunction3+0x4c>)
 8000208:	881b      	ldrh	r3, [r3, #0]
 800020a:	3301      	adds	r3, #1
 800020c:	b29a      	uxth	r2, r3
 800020e:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <taskFunction3+0x4c>)
 8000210:	801a      	strh	r2, [r3, #0]
 8000212:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <taskFunction3+0x4c>)
 8000214:	881b      	ldrh	r3, [r3, #0]
 8000216:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800021a:	d303      	bcc.n	8000224 <taskFunction3+0x2c>
    		{
    			count3 = 0;
 800021c:	4b09      	ldr	r3, [pc, #36]	; (8000244 <taskFunction3+0x4c>)
 800021e:	2200      	movs	r2, #0
 8000220:	801a      	strh	r2, [r3, #0]
    			break;
 8000222:	e003      	b.n	800022c <taskFunction3+0x34>
    		}
    		task_sleep(1);
 8000224:	2001      	movs	r0, #1
 8000226:	f001 fbeb 	bl	8001a00 <task_sleep>
    		if( ++ count3 >= 500)
 800022a:	e7ec      	b.n	8000206 <taskFunction3+0xe>

		}
    	Mutex_Give(mutex1);
 800022c:	4b04      	ldr	r3, [pc, #16]	; (8000240 <taskFunction3+0x48>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4618      	mov	r0, r3
 8000232:	f001 fc7d 	bl	8001b30 <Mutex_Give>
    	task_sleep(1);
 8000236:	2001      	movs	r0, #1
 8000238:	f001 fbe2 	bl	8001a00 <task_sleep>
    	Mutex_Take(mutex1);
 800023c:	e7de      	b.n	80001fc <taskFunction3+0x4>
 800023e:	bf00      	nop
 8000240:	20000098 	.word	0x20000098
 8000244:	20000090 	.word	0x20000090

08000248 <taskFunction4>:
    }
}

void taskFunction4(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0

    while (1) {
        // Code của task 2
//    	SMP_Take(smpforcount1);
//    	Mutex_Take(mutex1);
    	if( ++ count4 == 500)
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <taskFunction4+0x28>)
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	3301      	adds	r3, #1
 8000252:	b29a      	uxth	r2, r3
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <taskFunction4+0x28>)
 8000256:	801a      	strh	r2, [r3, #0]
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <taskFunction4+0x28>)
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000260:	d102      	bne.n	8000268 <taskFunction4+0x20>
    	{

//    		Mutex_Give(mutex1);
    		count4 = 0;
 8000262:	4b03      	ldr	r3, [pc, #12]	; (8000270 <taskFunction4+0x28>)
 8000264:	2200      	movs	r2, #0
 8000266:	801a      	strh	r2, [r3, #0]
    	}
    	task_sleep(1);
 8000268:	2001      	movs	r0, #1
 800026a:	f001 fbc9 	bl	8001a00 <task_sleep>
    	if( ++ count4 == 500)
 800026e:	e7ed      	b.n	800024c <taskFunction4+0x4>
 8000270:	20000092 	.word	0x20000092

08000274 <taskFunction5>:
    }
}

void taskFunction5(void) {
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0

    while (1) {
        // Code của task 2
//    	SMP_Take(smpforcount1);
//    	Mutex_Take(mutex1);
    	if( ++ count5 >= 15)
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <taskFunction5+0x28>)
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	b29a      	uxth	r2, r3
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <taskFunction5+0x28>)
 8000282:	801a      	strh	r2, [r3, #0]
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <taskFunction5+0x28>)
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	2b0e      	cmp	r3, #14
 800028a:	d902      	bls.n	8000292 <taskFunction5+0x1e>
    	{
//    		Mutex_Give(mutex1);
    		count5 = 0;
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <taskFunction5+0x28>)
 800028e:	2200      	movs	r2, #0
 8000290:	801a      	strh	r2, [r3, #0]
    	}
//    	SMP_counting_Give(smpforcount1);
    	task_sleep(1);
 8000292:	2001      	movs	r0, #1
 8000294:	f001 fbb4 	bl	8001a00 <task_sleep>
    	if( ++ count5 >= 15)
 8000298:	e7ee      	b.n	8000278 <taskFunction5+0x4>
 800029a:	bf00      	nop
 800029c:	20000094 	.word	0x20000094

080002a0 <mainApp>:




void mainApp(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0


	Init_os();
 80002a4:	f001 f8b4 	bl	8001410 <Init_os>

	Task1_handle = task_create(taskFunction1, "taskFunction1", 128, 7);
 80002a8:	2307      	movs	r3, #7
 80002aa:	2280      	movs	r2, #128	; 0x80
 80002ac:	4916      	ldr	r1, [pc, #88]	; (8000308 <mainApp+0x68>)
 80002ae:	4817      	ldr	r0, [pc, #92]	; (800030c <mainApp+0x6c>)
 80002b0:	f001 f8dc 	bl	800146c <task_create>
 80002b4:	4603      	mov	r3, r0
 80002b6:	4a16      	ldr	r2, [pc, #88]	; (8000310 <mainApp+0x70>)
 80002b8:	6013      	str	r3, [r2, #0]
	Task2_handle = task_create(taskFunction2, "taskFunction2", 128, 6);
 80002ba:	2306      	movs	r3, #6
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	4915      	ldr	r1, [pc, #84]	; (8000314 <mainApp+0x74>)
 80002c0:	4815      	ldr	r0, [pc, #84]	; (8000318 <mainApp+0x78>)
 80002c2:	f001 f8d3 	bl	800146c <task_create>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4a14      	ldr	r2, [pc, #80]	; (800031c <mainApp+0x7c>)
 80002ca:	6013      	str	r3, [r2, #0]
	Task3_handle = task_create(taskFunction3, "taskFunction3", 128, 5);
 80002cc:	2305      	movs	r3, #5
 80002ce:	2280      	movs	r2, #128	; 0x80
 80002d0:	4913      	ldr	r1, [pc, #76]	; (8000320 <mainApp+0x80>)
 80002d2:	4814      	ldr	r0, [pc, #80]	; (8000324 <mainApp+0x84>)
 80002d4:	f001 f8ca 	bl	800146c <task_create>
 80002d8:	4603      	mov	r3, r0
 80002da:	4a13      	ldr	r2, [pc, #76]	; (8000328 <mainApp+0x88>)
 80002dc:	6013      	str	r3, [r2, #0]
	Task4_handle = task_create(taskFunction4, "taskFunction4", 128, 7);
 80002de:	2307      	movs	r3, #7
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	4912      	ldr	r1, [pc, #72]	; (800032c <mainApp+0x8c>)
 80002e4:	4812      	ldr	r0, [pc, #72]	; (8000330 <mainApp+0x90>)
 80002e6:	f001 f8c1 	bl	800146c <task_create>
 80002ea:	4603      	mov	r3, r0
 80002ec:	4a11      	ldr	r2, [pc, #68]	; (8000334 <mainApp+0x94>)
 80002ee:	6013      	str	r3, [r2, #0]
	Task5_handle = task_create(taskFunction5, "taskFunction5", 128, 7);
 80002f0:	2307      	movs	r3, #7
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	4910      	ldr	r1, [pc, #64]	; (8000338 <mainApp+0x98>)
 80002f6:	4811      	ldr	r0, [pc, #68]	; (800033c <mainApp+0x9c>)
 80002f8:	f001 f8b8 	bl	800146c <task_create>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4a10      	ldr	r2, [pc, #64]	; (8000340 <mainApp+0xa0>)
 8000300:	6013      	str	r3, [r2, #0]

	DOS_start_kernel();
 8000302:	f001 fa89 	bl	8001818 <DOS_start_kernel>
//	DOS_stop_kernel();

	while(1)
 8000306:	e7fe      	b.n	8000306 <mainApp+0x66>
 8000308:	08001e2c 	.word	0x08001e2c
 800030c:	0800014d 	.word	0x0800014d
 8000310:	20000078 	.word	0x20000078
 8000314:	08001e3c 	.word	0x08001e3c
 8000318:	080001a9 	.word	0x080001a9
 800031c:	2000007c 	.word	0x2000007c
 8000320:	08001e4c 	.word	0x08001e4c
 8000324:	080001f9 	.word	0x080001f9
 8000328:	20000080 	.word	0x20000080
 800032c:	08001e5c 	.word	0x08001e5c
 8000330:	08000249 	.word	0x08000249
 8000334:	20000084 	.word	0x20000084
 8000338:	08001e6c 	.word	0x08001e6c
 800033c:	08000275 	.word	0x08000275
 8000340:	20000088 	.word	0x20000088

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000348:	f000 f94a 	bl	80005e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034c:	f000 f807 	bl	800035e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000350:	f000 f87a 	bl	8000448 <MX_GPIO_Init>
  MX_DMA_Init();
 8000354:	f000 f83e 	bl	80003d4 <MX_DMA_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mainApp();
 8000358:	f7ff ffa2 	bl	80002a0 <mainApp>
 800035c:	e7fc      	b.n	8000358 <main+0x14>

0800035e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800035e:	b580      	push	{r7, lr}
 8000360:	b090      	sub	sp, #64	; 0x40
 8000362:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000364:	f107 0318 	add.w	r3, r7, #24
 8000368:	2228      	movs	r2, #40	; 0x28
 800036a:	2100      	movs	r1, #0
 800036c:	4618      	mov	r0, r3
 800036e:	f001 fcc5 	bl	8001cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000380:	2302      	movs	r3, #2
 8000382:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000384:	2301      	movs	r3, #1
 8000386:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000388:	2310      	movs	r3, #16
 800038a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800038c:	2300      	movs	r3, #0
 800038e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000390:	f107 0318 	add.w	r3, r7, #24
 8000394:	4618      	mov	r0, r3
 8000396:	f000 fab1 	bl	80008fc <HAL_RCC_OscConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003a0:	f000 f868 	bl	8000474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a4:	230f      	movs	r3, #15
 80003a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2100      	movs	r1, #0
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fd1f 	bl	8000e00 <HAL_RCC_ClockConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003c8:	f000 f854 	bl	8000474 <Error_Handler>
  }
}
 80003cc:	bf00      	nop
 80003ce:	3740      	adds	r7, #64	; 0x40
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <MX_DMA_Init+0x68>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a17      	ldr	r2, [pc, #92]	; (800043c <MX_DMA_Init+0x68>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_DMA_Init+0x68>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 80003f2:	4b13      	ldr	r3, [pc, #76]	; (8000440 <MX_DMA_Init+0x6c>)
 80003f4:	4a13      	ldr	r2, [pc, #76]	; (8000444 <MX_DMA_Init+0x70>)
 80003f6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_DMA_Init+0x6c>)
 80003fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003fe:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_DMA_Init+0x6c>)
 8000402:	2240      	movs	r2, #64	; 0x40
 8000404:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_DMA_Init+0x6c>)
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_DMA_Init+0x6c>)
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <MX_DMA_Init+0x6c>)
 8000414:	2200      	movs	r2, #0
 8000416:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_DMA_Init+0x6c>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <MX_DMA_Init+0x6c>)
 8000420:	2200      	movs	r2, #0
 8000422:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000424:	4806      	ldr	r0, [pc, #24]	; (8000440 <MX_DMA_Init+0x6c>)
 8000426:	f000 fa0f 	bl	8000848 <HAL_DMA_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_DMA_Init+0x60>
  {
    Error_Handler( );
 8000430:	f000 f820 	bl	8000474 <Error_Handler>
  }

}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40021000 	.word	0x40021000
 8000440:	2000009c 	.word	0x2000009c
 8000444:	40020008 	.word	0x40020008

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <MX_GPIO_Init+0x28>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a07      	ldr	r2, [pc, #28]	; (8000470 <MX_GPIO_Init+0x28>)
 8000454:	f043 0304 	orr.w	r3, r3, #4
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <MX_GPIO_Init+0x28>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0304 	and.w	r3, r3, #4
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40021000 	.word	0x40021000

08000474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000478:	b672      	cpsid	i
}
 800047a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047c:	e7fe      	b.n	800047c <Error_Handler+0x8>
	...

08000480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <HAL_MspInit+0x5c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4a14      	ldr	r2, [pc, #80]	; (80004dc <HAL_MspInit+0x5c>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6193      	str	r3, [r2, #24]
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_MspInit+0x5c>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <HAL_MspInit+0x5c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <HAL_MspInit+0x5c>)
 80004a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a8:	61d3      	str	r3, [r2, #28]
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <HAL_MspInit+0x5c>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <HAL_MspInit+0x60>)
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <HAL_MspInit+0x60>)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010000 	.word	0x40010000

080004e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004e8:	e7fe      	b.n	80004e8 <NMI_Handler+0x4>

080004ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <HardFault_Handler+0x4>

080004f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <MemManage_Handler+0x4>

080004f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <BusFault_Handler+0x4>

080004fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <UsageFault_Handler+0x4>

08000502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
//
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
//
  /* USER CODE END SVCall_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr

0800050e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
	...

0800051c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <_sbrk+0x5c>)
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <_sbrk+0x60>)
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <_sbrk+0x64>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d102      	bne.n	800053e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <_sbrk+0x64>)
 800053a:	4a12      	ldr	r2, [pc, #72]	; (8000584 <_sbrk+0x68>)
 800053c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <_sbrk+0x64>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	693a      	ldr	r2, [r7, #16]
 8000548:	429a      	cmp	r2, r3
 800054a:	d207      	bcs.n	800055c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800054c:	f001 fbee 	bl	8001d2c <__errno>
 8000550:	4603      	mov	r3, r0
 8000552:	220c      	movs	r2, #12
 8000554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
 800055a:	e009      	b.n	8000570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <_sbrk+0x64>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <_sbrk+0x64>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	4a05      	ldr	r2, [pc, #20]	; (8000580 <_sbrk+0x64>)
 800056c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800056e:	68fb      	ldr	r3, [r7, #12]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20005000 	.word	0x20005000
 800057c:	00000400 	.word	0x00000400
 8000580:	200000e0 	.word	0x200000e0
 8000584:	20000248 	.word	0x20000248

08000588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000594:	f7ff fff8 	bl	8000588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800059a:	490c      	ldr	r1, [pc, #48]	; (80005cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800059c:	4a0c      	ldr	r2, [pc, #48]	; (80005d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005b0:	4c09      	ldr	r4, [pc, #36]	; (80005d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005be:	f001 fbbb 	bl	8001d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c2:	f7ff febf 	bl	8000344 <main>
  bx lr
 80005c6:	4770      	bx	lr
  ldr r0, =_sdata
 80005c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005d0:	08001eb4 	.word	0x08001eb4
  ldr r2, =_sbss
 80005d4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005d8:	20000244 	.word	0x20000244

080005dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005dc:	e7fe      	b.n	80005dc <ADC1_2_IRQHandler>
	...

080005e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <HAL_Init+0x28>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <HAL_Init+0x28>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f0:	2003      	movs	r0, #3
 80005f2:	f000 f8f5 	bl	80007e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f6:	200f      	movs	r0, #15
 80005f8:	f000 f808 	bl	800060c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005fc:	f7ff ff40 	bl	8000480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40022000 	.word	0x40022000

0800060c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_InitTick+0x54>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_InitTick+0x58>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	fbb3 f3f1 	udiv	r3, r3, r1
 8000626:	fbb2 f3f3 	udiv	r3, r2, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f8ff 	bl	800082e <HAL_SYSTICK_Config>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	e00e      	b.n	8000658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d80a      	bhi.n	8000656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	f04f 30ff 	mov.w	r0, #4294967295
 8000648:	f000 f8d5 	bl	80007f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <HAL_InitTick+0x5c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000652:	2300      	movs	r3, #0
 8000654:	e000      	b.n	8000658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000000 	.word	0x20000000
 8000664:	20000008 	.word	0x20000008
 8000668:	20000004 	.word	0x20000004

0800066c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b02      	ldr	r3, [pc, #8]	; (800067c <HAL_GetTick+0x10>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	200000e4 	.word	0x200000e4

08000680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800069c:	4013      	ands	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006b2:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <__NVIC_SetPriorityGrouping+0x44>)
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	60d3      	str	r3, [r2, #12]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <__NVIC_GetPriorityGrouping+0x18>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	f003 0307 	and.w	r3, r3, #7
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	db0a      	blt.n	800070e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	490c      	ldr	r1, [pc, #48]	; (8000730 <__NVIC_SetPriority+0x4c>)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	0112      	lsls	r2, r2, #4
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	440b      	add	r3, r1
 8000708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800070c:	e00a      	b.n	8000724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4908      	ldr	r1, [pc, #32]	; (8000734 <__NVIC_SetPriority+0x50>)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	f003 030f 	and.w	r3, r3, #15
 800071a:	3b04      	subs	r3, #4
 800071c:	0112      	lsls	r2, r2, #4
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	440b      	add	r3, r1
 8000722:	761a      	strb	r2, [r3, #24]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000e100 	.word	0xe000e100
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	; 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	f1c3 0307 	rsb	r3, r3, #7
 8000752:	2b04      	cmp	r3, #4
 8000754:	bf28      	it	cs
 8000756:	2304      	movcs	r3, #4
 8000758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3304      	adds	r3, #4
 800075e:	2b06      	cmp	r3, #6
 8000760:	d902      	bls.n	8000768 <NVIC_EncodePriority+0x30>
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	3b03      	subs	r3, #3
 8000766:	e000      	b.n	800076a <NVIC_EncodePriority+0x32>
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800076c:	f04f 32ff 	mov.w	r2, #4294967295
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	43da      	mvns	r2, r3
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	401a      	ands	r2, r3
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000780:	f04f 31ff 	mov.w	r1, #4294967295
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	43d9      	mvns	r1, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	4313      	orrs	r3, r2
         );
}
 8000792:	4618      	mov	r0, r3
 8000794:	3724      	adds	r7, #36	; 0x24
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007ac:	d301      	bcc.n	80007b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ae:	2301      	movs	r3, #1
 80007b0:	e00f      	b.n	80007d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <SysTick_Config+0x40>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ba:	210f      	movs	r1, #15
 80007bc:	f04f 30ff 	mov.w	r0, #4294967295
 80007c0:	f7ff ff90 	bl	80006e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <SysTick_Config+0x40>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ca:	4b04      	ldr	r3, [pc, #16]	; (80007dc <SysTick_Config+0x40>)
 80007cc:	2207      	movs	r2, #7
 80007ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	e000e010 	.word	0xe000e010

080007e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff49 	bl	8000680 <__NVIC_SetPriorityGrouping>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000808:	f7ff ff5e 	bl	80006c8 <__NVIC_GetPriorityGrouping>
 800080c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	6978      	ldr	r0, [r7, #20]
 8000814:	f7ff ff90 	bl	8000738 <NVIC_EncodePriority>
 8000818:	4602      	mov	r2, r0
 800081a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081e:	4611      	mov	r1, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff5f 	bl	80006e4 <__NVIC_SetPriority>
}
 8000826:	bf00      	nop
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff ffb0 	bl	800079c <SysTick_Config>
 800083c:	4603      	mov	r3, r0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d101      	bne.n	800085e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e043      	b.n	80008e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <HAL_DMA_Init+0xa8>)
 8000866:	4413      	add	r3, r2
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <HAL_DMA_Init+0xac>)
 800086a:	fba2 2303 	umull	r2, r3, r2, r3
 800086e:	091b      	lsrs	r3, r3, #4
 8000870:	009a      	lsls	r2, r3, #2
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a1f      	ldr	r2, [pc, #124]	; (80008f8 <HAL_DMA_Init+0xb0>)
 800087a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2202      	movs	r2, #2
 8000880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000892:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000896:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80008a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2201      	movs	r2, #1
 80008d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	bffdfff8 	.word	0xbffdfff8
 80008f4:	cccccccd 	.word	0xcccccccd
 80008f8:	40020000 	.word	0x40020000

080008fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d101      	bne.n	800090e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e272      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	2b00      	cmp	r3, #0
 8000918:	f000 8087 	beq.w	8000a2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800091c:	4b92      	ldr	r3, [pc, #584]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f003 030c 	and.w	r3, r3, #12
 8000924:	2b04      	cmp	r3, #4
 8000926:	d00c      	beq.n	8000942 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000928:	4b8f      	ldr	r3, [pc, #572]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	f003 030c 	and.w	r3, r3, #12
 8000930:	2b08      	cmp	r3, #8
 8000932:	d112      	bne.n	800095a <HAL_RCC_OscConfig+0x5e>
 8000934:	4b8c      	ldr	r3, [pc, #560]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800093c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000940:	d10b      	bne.n	800095a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000942:	4b89      	ldr	r3, [pc, #548]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094a:	2b00      	cmp	r3, #0
 800094c:	d06c      	beq.n	8000a28 <HAL_RCC_OscConfig+0x12c>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d168      	bne.n	8000a28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e24c      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000962:	d106      	bne.n	8000972 <HAL_RCC_OscConfig+0x76>
 8000964:	4b80      	ldr	r3, [pc, #512]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7f      	ldr	r2, [pc, #508]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 800096a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	e02e      	b.n	80009d0 <HAL_RCC_OscConfig+0xd4>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d10c      	bne.n	8000994 <HAL_RCC_OscConfig+0x98>
 800097a:	4b7b      	ldr	r3, [pc, #492]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a7a      	ldr	r2, [pc, #488]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000984:	6013      	str	r3, [r2, #0]
 8000986:	4b78      	ldr	r3, [pc, #480]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a77      	ldr	r2, [pc, #476]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 800098c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	e01d      	b.n	80009d0 <HAL_RCC_OscConfig+0xd4>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800099c:	d10c      	bne.n	80009b8 <HAL_RCC_OscConfig+0xbc>
 800099e:	4b72      	ldr	r3, [pc, #456]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a71      	ldr	r2, [pc, #452]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 80009a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a8:	6013      	str	r3, [r2, #0]
 80009aa:	4b6f      	ldr	r3, [pc, #444]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a6e      	ldr	r2, [pc, #440]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 80009b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009b4:	6013      	str	r3, [r2, #0]
 80009b6:	e00b      	b.n	80009d0 <HAL_RCC_OscConfig+0xd4>
 80009b8:	4b6b      	ldr	r3, [pc, #428]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a6a      	ldr	r2, [pc, #424]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 80009be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	4b68      	ldr	r3, [pc, #416]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a67      	ldr	r2, [pc, #412]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 80009ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d013      	beq.n	8000a00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d8:	f7ff fe48 	bl	800066c <HAL_GetTick>
 80009dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009de:	e008      	b.n	80009f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009e0:	f7ff fe44 	bl	800066c <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	2b64      	cmp	r3, #100	; 0x64
 80009ec:	d901      	bls.n	80009f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80009ee:	2303      	movs	r3, #3
 80009f0:	e200      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009f2:	4b5d      	ldr	r3, [pc, #372]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d0f0      	beq.n	80009e0 <HAL_RCC_OscConfig+0xe4>
 80009fe:	e014      	b.n	8000a2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a00:	f7ff fe34 	bl	800066c <HAL_GetTick>
 8000a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a06:	e008      	b.n	8000a1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a08:	f7ff fe30 	bl	800066c <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	2b64      	cmp	r3, #100	; 0x64
 8000a14:	d901      	bls.n	8000a1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000a16:	2303      	movs	r3, #3
 8000a18:	e1ec      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a1a:	4b53      	ldr	r3, [pc, #332]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1f0      	bne.n	8000a08 <HAL_RCC_OscConfig+0x10c>
 8000a26:	e000      	b.n	8000a2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d063      	beq.n	8000afe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a36:	4b4c      	ldr	r3, [pc, #304]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f003 030c 	and.w	r3, r3, #12
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00b      	beq.n	8000a5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a42:	4b49      	ldr	r3, [pc, #292]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f003 030c 	and.w	r3, r3, #12
 8000a4a:	2b08      	cmp	r3, #8
 8000a4c:	d11c      	bne.n	8000a88 <HAL_RCC_OscConfig+0x18c>
 8000a4e:	4b46      	ldr	r3, [pc, #280]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d116      	bne.n	8000a88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a5a:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d005      	beq.n	8000a72 <HAL_RCC_OscConfig+0x176>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	691b      	ldr	r3, [r3, #16]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d001      	beq.n	8000a72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e1c0      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a72:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	4939      	ldr	r1, [pc, #228]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000a82:	4313      	orrs	r3, r2
 8000a84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a86:	e03a      	b.n	8000afe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d020      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a90:	4b36      	ldr	r3, [pc, #216]	; (8000b6c <HAL_RCC_OscConfig+0x270>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a96:	f7ff fde9 	bl	800066c <HAL_GetTick>
 8000a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a9c:	e008      	b.n	8000ab0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a9e:	f7ff fde5 	bl	800066c <HAL_GetTick>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d901      	bls.n	8000ab0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000aac:	2303      	movs	r3, #3
 8000aae:	e1a1      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ab0:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d0f0      	beq.n	8000a9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000abc:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	4927      	ldr	r1, [pc, #156]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000acc:	4313      	orrs	r3, r2
 8000ace:	600b      	str	r3, [r1, #0]
 8000ad0:	e015      	b.n	8000afe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ad2:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <HAL_RCC_OscConfig+0x270>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ad8:	f7ff fdc8 	bl	800066c <HAL_GetTick>
 8000adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ade:	e008      	b.n	8000af2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ae0:	f7ff fdc4 	bl	800066c <HAL_GetTick>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d901      	bls.n	8000af2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000aee:	2303      	movs	r3, #3
 8000af0:	e180      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1f0      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d03a      	beq.n	8000b80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d019      	beq.n	8000b46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_RCC_OscConfig+0x274>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b18:	f7ff fda8 	bl	800066c <HAL_GetTick>
 8000b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b1e:	e008      	b.n	8000b32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b20:	f7ff fda4 	bl	800066c <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d901      	bls.n	8000b32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e160      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_RCC_OscConfig+0x26c>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0f0      	beq.n	8000b20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f000 fa9c 	bl	800107c <RCC_Delay>
 8000b44:	e01c      	b.n	8000b80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_RCC_OscConfig+0x274>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b4c:	f7ff fd8e 	bl	800066c <HAL_GetTick>
 8000b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b52:	e00f      	b.n	8000b74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b54:	f7ff fd8a 	bl	800066c <HAL_GetTick>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d908      	bls.n	8000b74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000b62:	2303      	movs	r3, #3
 8000b64:	e146      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	42420000 	.word	0x42420000
 8000b70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b74:	4b92      	ldr	r3, [pc, #584]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1e9      	bne.n	8000b54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f000 80a6 	beq.w	8000cda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b92:	4b8b      	ldr	r3, [pc, #556]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10d      	bne.n	8000bba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b88      	ldr	r3, [pc, #544]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	4a87      	ldr	r2, [pc, #540]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	61d3      	str	r3, [r2, #28]
 8000baa:	4b85      	ldr	r3, [pc, #532]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bba:	4b82      	ldr	r3, [pc, #520]	; (8000dc4 <HAL_RCC_OscConfig+0x4c8>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d118      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bc6:	4b7f      	ldr	r3, [pc, #508]	; (8000dc4 <HAL_RCC_OscConfig+0x4c8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a7e      	ldr	r2, [pc, #504]	; (8000dc4 <HAL_RCC_OscConfig+0x4c8>)
 8000bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000bd2:	f7ff fd4b 	bl	800066c <HAL_GetTick>
 8000bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bd8:	e008      	b.n	8000bec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bda:	f7ff fd47 	bl	800066c <HAL_GetTick>
 8000bde:	4602      	mov	r2, r0
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	2b64      	cmp	r3, #100	; 0x64
 8000be6:	d901      	bls.n	8000bec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000be8:	2303      	movs	r3, #3
 8000bea:	e103      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bec:	4b75      	ldr	r3, [pc, #468]	; (8000dc4 <HAL_RCC_OscConfig+0x4c8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f0      	beq.n	8000bda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d106      	bne.n	8000c0e <HAL_RCC_OscConfig+0x312>
 8000c00:	4b6f      	ldr	r3, [pc, #444]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c02:	6a1b      	ldr	r3, [r3, #32]
 8000c04:	4a6e      	ldr	r2, [pc, #440]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6213      	str	r3, [r2, #32]
 8000c0c:	e02d      	b.n	8000c6a <HAL_RCC_OscConfig+0x36e>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10c      	bne.n	8000c30 <HAL_RCC_OscConfig+0x334>
 8000c16:	4b6a      	ldr	r3, [pc, #424]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c18:	6a1b      	ldr	r3, [r3, #32]
 8000c1a:	4a69      	ldr	r2, [pc, #420]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c1c:	f023 0301 	bic.w	r3, r3, #1
 8000c20:	6213      	str	r3, [r2, #32]
 8000c22:	4b67      	ldr	r3, [pc, #412]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c24:	6a1b      	ldr	r3, [r3, #32]
 8000c26:	4a66      	ldr	r2, [pc, #408]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c28:	f023 0304 	bic.w	r3, r3, #4
 8000c2c:	6213      	str	r3, [r2, #32]
 8000c2e:	e01c      	b.n	8000c6a <HAL_RCC_OscConfig+0x36e>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	2b05      	cmp	r3, #5
 8000c36:	d10c      	bne.n	8000c52 <HAL_RCC_OscConfig+0x356>
 8000c38:	4b61      	ldr	r3, [pc, #388]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c3a:	6a1b      	ldr	r3, [r3, #32]
 8000c3c:	4a60      	ldr	r2, [pc, #384]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	6213      	str	r3, [r2, #32]
 8000c44:	4b5e      	ldr	r3, [pc, #376]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	4a5d      	ldr	r2, [pc, #372]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6213      	str	r3, [r2, #32]
 8000c50:	e00b      	b.n	8000c6a <HAL_RCC_OscConfig+0x36e>
 8000c52:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c54:	6a1b      	ldr	r3, [r3, #32]
 8000c56:	4a5a      	ldr	r2, [pc, #360]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	6213      	str	r3, [r2, #32]
 8000c5e:	4b58      	ldr	r3, [pc, #352]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c60:	6a1b      	ldr	r3, [r3, #32]
 8000c62:	4a57      	ldr	r2, [pc, #348]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c64:	f023 0304 	bic.w	r3, r3, #4
 8000c68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d015      	beq.n	8000c9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c72:	f7ff fcfb 	bl	800066c <HAL_GetTick>
 8000c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c78:	e00a      	b.n	8000c90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c7a:	f7ff fcf7 	bl	800066c <HAL_GetTick>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d901      	bls.n	8000c90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	e0b1      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c90:	4b4b      	ldr	r3, [pc, #300]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000c92:	6a1b      	ldr	r3, [r3, #32]
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0ee      	beq.n	8000c7a <HAL_RCC_OscConfig+0x37e>
 8000c9c:	e014      	b.n	8000cc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c9e:	f7ff fce5 	bl	800066c <HAL_GetTick>
 8000ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ca4:	e00a      	b.n	8000cbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ca6:	f7ff fce1 	bl	800066c <HAL_GetTick>
 8000caa:	4602      	mov	r2, r0
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e09b      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cbc:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000cbe:	6a1b      	ldr	r3, [r3, #32]
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1ee      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000cc8:	7dfb      	ldrb	r3, [r7, #23]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d105      	bne.n	8000cda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cce:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	4a3b      	ldr	r2, [pc, #236]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 8087 	beq.w	8000df2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ce4:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 030c 	and.w	r3, r3, #12
 8000cec:	2b08      	cmp	r3, #8
 8000cee:	d061      	beq.n	8000db4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69db      	ldr	r3, [r3, #28]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d146      	bne.n	8000d86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cf8:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <HAL_RCC_OscConfig+0x4cc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfe:	f7ff fcb5 	bl	800066c <HAL_GetTick>
 8000d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d04:	e008      	b.n	8000d18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d06:	f7ff fcb1 	bl	800066c <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d901      	bls.n	8000d18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e06d      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d18:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f0      	bne.n	8000d06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a1b      	ldr	r3, [r3, #32]
 8000d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d2c:	d108      	bne.n	8000d40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d2e:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	4921      	ldr	r1, [pc, #132]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a19      	ldr	r1, [r3, #32]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	430b      	orrs	r3, r1
 8000d52:	491b      	ldr	r1, [pc, #108]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000d54:	4313      	orrs	r3, r2
 8000d56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <HAL_RCC_OscConfig+0x4cc>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5e:	f7ff fc85 	bl	800066c <HAL_GetTick>
 8000d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d64:	e008      	b.n	8000d78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d66:	f7ff fc81 	bl	800066c <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d901      	bls.n	8000d78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000d74:	2303      	movs	r3, #3
 8000d76:	e03d      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f0      	beq.n	8000d66 <HAL_RCC_OscConfig+0x46a>
 8000d84:	e035      	b.n	8000df2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <HAL_RCC_OscConfig+0x4cc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8c:	f7ff fc6e 	bl	800066c <HAL_GetTick>
 8000d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d92:	e008      	b.n	8000da6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d94:	f7ff fc6a 	bl	800066c <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d901      	bls.n	8000da6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e026      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_RCC_OscConfig+0x4c4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1f0      	bne.n	8000d94 <HAL_RCC_OscConfig+0x498>
 8000db2:	e01e      	b.n	8000df2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d107      	bne.n	8000dcc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e019      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40007000 	.word	0x40007000
 8000dc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_RCC_OscConfig+0x500>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d106      	bne.n	8000dee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d001      	beq.n	8000df2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40021000 	.word	0x40021000

08000e00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e0d0      	b.n	8000fb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e14:	4b6a      	ldr	r3, [pc, #424]	; (8000fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d910      	bls.n	8000e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e22:	4b67      	ldr	r3, [pc, #412]	; (8000fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f023 0207 	bic.w	r2, r3, #7
 8000e2a:	4965      	ldr	r1, [pc, #404]	; (8000fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e32:	4b63      	ldr	r3, [pc, #396]	; (8000fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d001      	beq.n	8000e44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e0b8      	b.n	8000fb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d020      	beq.n	8000e92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d005      	beq.n	8000e68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e5c:	4b59      	ldr	r3, [pc, #356]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	4a58      	ldr	r2, [pc, #352]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000e66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d005      	beq.n	8000e80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e74:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	4a52      	ldr	r2, [pc, #328]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000e7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e80:	4b50      	ldr	r3, [pc, #320]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	494d      	ldr	r1, [pc, #308]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d040      	beq.n	8000f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d107      	bne.n	8000eb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea6:	4b47      	ldr	r3, [pc, #284]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d115      	bne.n	8000ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e07f      	b.n	8000fb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d107      	bne.n	8000ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ebe:	4b41      	ldr	r3, [pc, #260]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d109      	bne.n	8000ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e073      	b.n	8000fb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ece:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e06b      	b.n	8000fb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ede:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f023 0203 	bic.w	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	4936      	ldr	r1, [pc, #216]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000eec:	4313      	orrs	r3, r2
 8000eee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ef0:	f7ff fbbc 	bl	800066c <HAL_GetTick>
 8000ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ef6:	e00a      	b.n	8000f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ef8:	f7ff fbb8 	bl	800066c <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e053      	b.n	8000fb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 020c 	and.w	r2, r3, #12
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d1eb      	bne.n	8000ef8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d210      	bcs.n	8000f50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 0207 	bic.w	r2, r3, #7
 8000f36:	4922      	ldr	r1, [pc, #136]	; (8000fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d001      	beq.n	8000f50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e032      	b.n	8000fb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d008      	beq.n	8000f6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4916      	ldr	r1, [pc, #88]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d009      	beq.n	8000f8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	490e      	ldr	r1, [pc, #56]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f8e:	f000 f821 	bl	8000fd4 <HAL_RCC_GetSysClockFreq>
 8000f92:	4602      	mov	r2, r0
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	490a      	ldr	r1, [pc, #40]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8000fa0:	5ccb      	ldrb	r3, [r1, r3]
 8000fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_RCC_ClockConfig+0x1cc>)
 8000fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_RCC_ClockConfig+0x1d0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fb2c 	bl	800060c <HAL_InitTick>

  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40022000 	.word	0x40022000
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	08001e7c 	.word	0x08001e7c
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <HAL_RCC_GetSysClockFreq+0x94>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d002      	beq.n	8001004 <HAL_RCC_GetSysClockFreq+0x30>
 8000ffe:	2b08      	cmp	r3, #8
 8001000:	d003      	beq.n	800100a <HAL_RCC_GetSysClockFreq+0x36>
 8001002:	e027      	b.n	8001054 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_RCC_GetSysClockFreq+0x98>)
 8001006:	613b      	str	r3, [r7, #16]
      break;
 8001008:	e027      	b.n	800105a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	0c9b      	lsrs	r3, r3, #18
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001014:	5cd3      	ldrb	r3, [r2, r3]
 8001016:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d010      	beq.n	8001044 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_RCC_GetSysClockFreq+0x94>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	0c5b      	lsrs	r3, r3, #17
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <HAL_RCC_GetSysClockFreq+0xa0>)
 800102e:	5cd3      	ldrb	r3, [r2, r3]
 8001030:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <HAL_RCC_GetSysClockFreq+0x98>)
 8001036:	fb03 f202 	mul.w	r2, r3, r2
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e004      	b.n	800104e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001048:	fb02 f303 	mul.w	r3, r2, r3
 800104c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	613b      	str	r3, [r7, #16]
      break;
 8001052:	e002      	b.n	800105a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_RCC_GetSysClockFreq+0x98>)
 8001056:	613b      	str	r3, [r7, #16]
      break;
 8001058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800105a:	693b      	ldr	r3, [r7, #16]
}
 800105c:	4618      	mov	r0, r3
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000
 800106c:	007a1200 	.word	0x007a1200
 8001070:	08001e8c 	.word	0x08001e8c
 8001074:	08001e9c 	.word	0x08001e9c
 8001078:	003d0900 	.word	0x003d0900

0800107c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <RCC_Delay+0x34>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <RCC_Delay+0x38>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	0a5b      	lsrs	r3, r3, #9
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001098:	bf00      	nop
  }
  while (Delay --);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	1e5a      	subs	r2, r3, #1
 800109e:	60fa      	str	r2, [r7, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f9      	bne.n	8001098 <RCC_Delay+0x1c>
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	20000000 	.word	0x20000000
 80010b4:	10624dd3 	.word	0x10624dd3

080010b8 <newMList>:
#include "list.h"

MemList * newMList(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	MemList * _newMList = (MemList *)malloc(sizeof(MemList));
 80010be:	2008      	movs	r0, #8
 80010c0:	f000 fd60 	bl	8001b84 <malloc>
 80010c4:	4603      	mov	r3, r0
 80010c6:	607b      	str	r3, [r7, #4]
	_newMList->_lists = NULL;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
	_newMList->Numlist = 0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	809a      	strh	r2, [r3, #4]
	return _newMList;
 80010d4:	687b      	ldr	r3, [r7, #4]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <newLists>:

List *newLists(uint8_t pos)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
	List * _newList = (List *)malloc(sizeof(List));
 80010e8:	2008      	movs	r0, #8
 80010ea:	f000 fd4b 	bl	8001b84 <malloc>
 80010ee:	4603      	mov	r3, r0
 80010f0:	60fb      	str	r3, [r7, #12]
	_newList->Objs = NULL;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
	_newList->Next = NULL;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2200      	movs	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
	return _newList;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <List_AddObj>:

uint8_t List_AddObj(MemList *mlist, uint16_t pos, void * Obj)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	460b      	mov	r3, r1
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	817b      	strh	r3, [r7, #10]
	List *__list = mlist->_lists;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	61fb      	str	r3, [r7, #28]
	List *_list = __list;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	61bb      	str	r3, [r7, #24]
	List * newlist = NULL;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
	uint16_t count = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	82fb      	strh	r3, [r7, #22]
	if(pos > mlist->Numlist && mlist->Numlist != 0)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	889b      	ldrh	r3, [r3, #4]
 800112c:	897a      	ldrh	r2, [r7, #10]
 800112e:	429a      	cmp	r2, r3
 8001130:	d921      	bls.n	8001176 <List_AddObj+0x6e>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	889b      	ldrh	r3, [r3, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d01d      	beq.n	8001176 <List_AddObj+0x6e>
	{
		while(__list != NULL)
 800113a:	e00c      	b.n	8001156 <List_AddObj+0x4e>
		{
			_list = __list;
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	61bb      	str	r3, [r7, #24]
			__list = __list->Next;
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	61fb      	str	r3, [r7, #28]
			if(++ count == mlist->Numlist)
 8001146:	8afb      	ldrh	r3, [r7, #22]
 8001148:	3301      	adds	r3, #1
 800114a:	82fb      	strh	r3, [r7, #22]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	889b      	ldrh	r3, [r3, #4]
 8001150:	8afa      	ldrh	r2, [r7, #22]
 8001152:	429a      	cmp	r2, r3
 8001154:	d003      	beq.n	800115e <List_AddObj+0x56>
		while(__list != NULL)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1ef      	bne.n	800113c <List_AddObj+0x34>
 800115c:	e000      	b.n	8001160 <List_AddObj+0x58>
			{
				break;
 800115e:	bf00      	nop
			}
		}
		newlist = newLists(0);
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff ffbc 	bl	80010de <newLists>
 8001166:	6138      	str	r0, [r7, #16]
		newlist->Objs = Obj;
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	601a      	str	r2, [r3, #0]
		_list->Next = newlist;
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	e033      	b.n	80011de <List_AddObj+0xd6>
	}
	else if(pos == 0 || mlist->Numlist == 0)
 8001176:	897b      	ldrh	r3, [r7, #10]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <List_AddObj+0x7c>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	889b      	ldrh	r3, [r3, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d11a      	bne.n	80011ba <List_AddObj+0xb2>
	{
		newlist = newLists(0);
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff ffaa 	bl	80010de <newLists>
 800118a:	6138      	str	r0, [r7, #16]
		newlist->Objs = Obj;
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	601a      	str	r2, [r3, #0]
		newlist->Next = mlist->_lists;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	605a      	str	r2, [r3, #4]
		mlist->_lists = newlist;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e01d      	b.n	80011de <List_AddObj+0xd6>
	}
	else
	{
		while(__list != NULL)
		{
			_list = __list;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	61bb      	str	r3, [r7, #24]
			__list = __list->Next;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61fb      	str	r3, [r7, #28]
			if(++count == pos)
 80011ac:	8afb      	ldrh	r3, [r7, #22]
 80011ae:	3301      	adds	r3, #1
 80011b0:	82fb      	strh	r3, [r7, #22]
 80011b2:	8afa      	ldrh	r2, [r7, #22]
 80011b4:	897b      	ldrh	r3, [r7, #10]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d003      	beq.n	80011c2 <List_AddObj+0xba>
		while(__list != NULL)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f0      	bne.n	80011a2 <List_AddObj+0x9a>
 80011c0:	e000      	b.n	80011c4 <List_AddObj+0xbc>
			{
				break;
 80011c2:	bf00      	nop
			}
		}
		newlist = newLists(0);
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ff8a 	bl	80010de <newLists>
 80011ca:	6138      	str	r0, [r7, #16]
		newlist->Objs = Obj;
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	601a      	str	r2, [r3, #0]
		_list->Next = newlist;
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	605a      	str	r2, [r3, #4]
		newlist->Next = __list;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	605a      	str	r2, [r3, #4]

	}
	mlist->Numlist ++;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	889b      	ldrh	r3, [r3, #4]
 80011e2:	3301      	adds	r3, #1
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	809a      	strh	r2, [r3, #4]
	return 0;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <List_GetObj>:
uint8_t List_GetObj(MemList *mlist, uint16_t pos, void ** Obj)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	460b      	mov	r3, r1
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	817b      	strh	r3, [r7, #10]
	List *__list = mlist->_lists;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	61fb      	str	r3, [r7, #28]
	List *_list = __list;
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	61bb      	str	r3, [r7, #24]
	uint16_t count = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	82fb      	strh	r3, [r7, #22]
	if(mlist->Numlist == 0)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	889b      	ldrh	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <List_GetObj+0x28>
	{
		return 0;
 8001218:	2300      	movs	r3, #0
 800121a:	e073      	b.n	8001304 <List_GetObj+0x110>
	}
	if(mlist->Numlist == 1)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	889b      	ldrh	r3, [r3, #4]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d10c      	bne.n	800123e <List_GetObj+0x4a>
	{
		*Obj = __list->Objs;
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	601a      	str	r2, [r3, #0]
		free(mlist->_lists);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fcaf 	bl	8001b94 <free>
		mlist->_lists = NULL;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e05b      	b.n	80012f6 <List_GetObj+0x102>
	}
	else if(pos > mlist->Numlist)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	889b      	ldrh	r3, [r3, #4]
 8001242:	897a      	ldrh	r2, [r7, #10]
 8001244:	429a      	cmp	r2, r3
 8001246:	d91f      	bls.n	8001288 <List_GetObj+0x94>
	{
		while(__list != NULL)
 8001248:	e00c      	b.n	8001264 <List_GetObj+0x70>
		{
			if(++ count == mlist->Numlist)
 800124a:	8afb      	ldrh	r3, [r7, #22]
 800124c:	3301      	adds	r3, #1
 800124e:	82fb      	strh	r3, [r7, #22]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	889b      	ldrh	r3, [r3, #4]
 8001254:	8afa      	ldrh	r2, [r7, #22]
 8001256:	429a      	cmp	r2, r3
 8001258:	d008      	beq.n	800126c <List_GetObj+0x78>
			{
				break;
			}
			_list = __list;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	61bb      	str	r3, [r7, #24]
			__list = __list->Next;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61fb      	str	r3, [r7, #28]
		while(__list != NULL)
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1ef      	bne.n	800124a <List_GetObj+0x56>
 800126a:	e000      	b.n	800126e <List_GetObj+0x7a>
				break;
 800126c:	bf00      	nop

		}
		*Obj = __list->Objs;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]
		free(_list->Next);
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4618      	mov	r0, r3
 800127c:	f000 fc8a 	bl	8001b94 <free>
		_list->Next = NULL;
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	e036      	b.n	80012f6 <List_GetObj+0x102>
	}
	else if(pos == 0)
 8001288:	897b      	ldrh	r3, [r7, #10]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d11e      	bne.n	80012cc <List_GetObj+0xd8>
	{
		* Obj = __list->Objs;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	601a      	str	r2, [r3, #0]
		_list = _list->Next;
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	61bb      	str	r3, [r7, #24]
		__list->Objs = NULL;
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
		free(__list);
 80012a2:	69f8      	ldr	r0, [r7, #28]
 80012a4:	f000 fc76 	bl	8001b94 <free>
		__list = NULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
		mlist->_lists = _list;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	e020      	b.n	80012f6 <List_GetObj+0x102>
	}
	else
	{
		while(__list != NULL)
		{
			_list = __list;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	61bb      	str	r3, [r7, #24]
			__list = __list->Next;
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	61fb      	str	r3, [r7, #28]
			if(++count == pos)
 80012be:	8afb      	ldrh	r3, [r7, #22]
 80012c0:	3301      	adds	r3, #1
 80012c2:	82fb      	strh	r3, [r7, #22]
 80012c4:	8afa      	ldrh	r2, [r7, #22]
 80012c6:	897b      	ldrh	r3, [r7, #10]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d003      	beq.n	80012d4 <List_GetObj+0xe0>
		while(__list != NULL)
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <List_GetObj+0xc0>
 80012d2:	e000      	b.n	80012d6 <List_GetObj+0xe2>
			{
				break;
 80012d4:	bf00      	nop
			}
		}
		* Obj = __list->Objs;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]
		__list->Objs = NULL;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
		_list->Next = __list->Next;
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	605a      	str	r2, [r3, #4]
		free(__list);
 80012ec:	69f8      	ldr	r0, [r7, #28]
 80012ee:	f000 fc51 	bl	8001b94 <free>
		__list =  NULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]

//		_list->Next = newlist;
//		newlist->Next = __list;

	}
	mlist->Numlist --;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	889b      	ldrh	r3, [r3, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	809a      	strh	r2, [r3, #4]

	return 1;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <List_PtrObj>:

void *List_PtrObj(MemList *mlist, uint16_t pos)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
	List *_list = mlist->_lists;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
	uint16_t count = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	817b      	strh	r3, [r7, #10]
	if(pos > mlist->Numlist || _list == NULL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	889b      	ldrh	r3, [r3, #4]
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	429a      	cmp	r2, r3
 800132a:	d802      	bhi.n	8001332 <List_PtrObj+0x26>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <List_PtrObj+0x2a>
	{
		return NULL;
 8001332:	2300      	movs	r3, #0
 8001334:	e016      	b.n	8001364 <List_PtrObj+0x58>
	}
	else if(pos == 0)
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10c      	bne.n	8001356 <List_PtrObj+0x4a>
	{
		return _list->Objs;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	e010      	b.n	8001364 <List_PtrObj+0x58>
	}
	while(_list != NULL)
	{
		_list = _list->Next;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	60fb      	str	r3, [r7, #12]
		if(++ count == pos)
 8001348:	897b      	ldrh	r3, [r7, #10]
 800134a:	3301      	adds	r3, #1
 800134c:	817b      	strh	r3, [r7, #10]
 800134e:	897a      	ldrh	r2, [r7, #10]
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	429a      	cmp	r2, r3
 8001354:	d003      	beq.n	800135e <List_PtrObj+0x52>
	while(_list != NULL)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f2      	bne.n	8001342 <List_PtrObj+0x36>
 800135c:	e000      	b.n	8001360 <List_PtrObj+0x54>
		{
			break;
 800135e:	bf00      	nop
		}
	}
	return _list->Objs;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <List_deleteObj>:

uint8_t List_deleteObj(MemList *mlist, void *Obj)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
	List *__list = mlist->_lists;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
	List *_list = __list;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	60bb      	str	r3, [r7, #8]
	while(__list != NULL)
 8001382:	e02e      	b.n	80013e2 <List_deleteObj+0x74>
	{
		if(__list->Objs == Obj)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d124      	bne.n	80013d8 <List_deleteObj+0x6a>
		{
			__list->Objs = NULL;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
			if(__list != mlist->_lists)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	429a      	cmp	r2, r3
 800139c:	d009      	beq.n	80013b2 <List_deleteObj+0x44>
			{
				_list->Next = __list->Next;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	605a      	str	r2, [r3, #4]
				free(__list);
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 fbf4 	bl	8001b94 <free>
				__list = NULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e00a      	b.n	80013c8 <List_deleteObj+0x5a>
			}
			else
			{
				_list = _list->Next;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	60bb      	str	r3, [r7, #8]
				free(__list);
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 fbeb 	bl	8001b94 <free>
				__list = NULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
				mlist->_lists = _list;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	601a      	str	r2, [r3, #0]
			}
			mlist->Numlist --;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	889b      	ldrh	r3, [r3, #4]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	809a      	strh	r2, [r3, #4]
			return 1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e008      	b.n	80013ea <List_deleteObj+0x7c>
		}
		_list = __list;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	60bb      	str	r3, [r7, #8]
		__list = __list->Next;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	60fb      	str	r3, [r7, #12]
	while(__list != NULL)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1cd      	bne.n	8001384 <List_deleteObj+0x16>
		
	}
	return 0;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <switchToPSP>:

MemList *Tasks_Ready;
MemList *Tasks_Block;


void switchToPSP(void) {
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
    __asm volatile (
 80013f8:	f3ef 8014 	mrs	r0, CONTROL
 80013fc:	f040 0002 	orr.w	r0, r0, #2
 8001400:	f380 8814 	msr	CONTROL, r0
 8001404:	f3bf 8f6f 	isb	sy
        "mrs r0, control \n"   // Đọc thanh ghi CONTROL
        "orr r0, r0, #0x02 \n" // Đặt bit 1 để chọn PSP (Process Stack Pointer)
        "msr control, r0 \n"   // Ghi giá trị mới vào CONTROL để chuyển sang PSP
        "isb \n"               // Đồng bộ hóa lệnh
    );
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <Init_os>:

void Init_os(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	DOS_stop_kernel();
 8001414:	f000 fa0e 	bl	8001834 <DOS_stop_kernel>
	switchToPSP();  // Chuyển CPU sang sử dụng PSP
 8001418:	f7ff ffec 	bl	80013f4 <switchToPSP>
	Tasks_Ready = newMList();
 800141c:	f7ff fe4c 	bl	80010b8 <newMList>
 8001420:	4603      	mov	r3, r0
 8001422:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <Init_os+0x48>)
 8001424:	6013      	str	r3, [r2, #0]
	Tasks_Block = newMList();
 8001426:	f7ff fe47 	bl	80010b8 <newMList>
 800142a:	4603      	mov	r3, r0
 800142c:	4a0b      	ldr	r2, [pc, #44]	; (800145c <Init_os+0x4c>)
 800142e:	6013      	str	r3, [r2, #0]

	task_create(MiniOS_TaskIdle, "task_idle", 64, 0);
 8001430:	2300      	movs	r3, #0
 8001432:	2240      	movs	r2, #64	; 0x40
 8001434:	490a      	ldr	r1, [pc, #40]	; (8001460 <Init_os+0x50>)
 8001436:	480b      	ldr	r0, [pc, #44]	; (8001464 <Init_os+0x54>)
 8001438:	f000 f818 	bl	800146c <task_create>
	List_GetObj(Tasks_Ready, 0xFF, (void*)&Task_running);
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <Init_os+0x48>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a09      	ldr	r2, [pc, #36]	; (8001468 <Init_os+0x58>)
 8001442:	21ff      	movs	r1, #255	; 0xff
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fed5 	bl	80011f4 <List_GetObj>
	Task_running->state = NONE;
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <Init_os+0x58>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2204      	movs	r2, #4
 8001450:	759a      	strb	r2, [r3, #22]

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200000f4 	.word	0x200000f4
 800145c:	200000f8 	.word	0x200000f8
 8001460:	08001ea0 	.word	0x08001ea0
 8001464:	08001a7d 	.word	0x08001a7d
 8001468:	200000e8 	.word	0x200000e8

0800146c <task_create>:


OS_task_t * task_create(Task_Function funct, const char *name, uint16_t stack_size, uint8_t piority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	460b      	mov	r3, r1
 800147c:	80fb      	strh	r3, [r7, #6]
 800147e:	4613      	mov	r3, r2
 8001480:	717b      	strb	r3, [r7, #5]
	OS_task_t *newTask = (OS_task_t*)malloc(sizeof(OS_task_t));
 8001482:	2018      	movs	r0, #24
 8001484:	f000 fb7e 	bl	8001b84 <malloc>
 8001488:	4603      	mov	r3, r0
 800148a:	617b      	str	r3, [r7, #20]
	newTask->function = funct;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	601a      	str	r2, [r3, #0]
	newTask->name = name;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	605a      	str	r2, [r3, #4]
	newTask->piority = piority;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	797a      	ldrb	r2, [r7, #5]
 800149c:	75da      	strb	r2, [r3, #23]
	newTask->stack_size = stack_size;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	88fa      	ldrh	r2, [r7, #6]
 80014a2:	829a      	strh	r2, [r3, #20]
	newTask->stack_size = (newTask->stack_size / 4) * 4;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	8a9b      	ldrh	r3, [r3, #20]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	829a      	strh	r2, [r3, #20]
	newTask->state = READY;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2201      	movs	r2, #1
 80014b8:	759a      	strb	r2, [r3, #22]
	newTask->timeSleep = 0;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]


	newTask->stackBase = (uint32_t *)malloc(newTask->stack_size * 4);
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	8a9b      	ldrh	r3, [r3, #20]
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fb5c 	bl	8001b84 <malloc>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	60da      	str	r2, [r3, #12]

	newTask->stackBase[newTask->stack_size - 1] = 0x01000000;          // xPSR: Thiết lập bit Thumb (T = 1)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	8a9b      	ldrh	r3, [r3, #20]
 80014dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014e0:	3b01      	subs	r3, #1
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014ea:	601a      	str	r2, [r3, #0]
	newTask->stackBase[newTask->stack_size - 2] = (uint32_t)funct; // PC: Địa chỉ hàm taskFunction
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	8a9b      	ldrh	r3, [r3, #20]
 80014f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014f8:	3b02      	subs	r3, #2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	601a      	str	r2, [r3, #0]
	newTask->stackBase[newTask->stack_size - 3] = 0xFFFFFFFD;          // LR: Trở về với chế độ Thread
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	8a9b      	ldrh	r3, [r3, #20]
 800150a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800150e:	3b03      	subs	r3, #3
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	f06f 0202 	mvn.w	r2, #2
 8001518:	601a      	str	r2, [r3, #0]
	// Các thanh ghi R12, R3, R2, R1, R0 (chúng ta đặt giá trị mặc định)
	newTask->stackBase[newTask->stack_size - 4] = 0x00000012;          // R12
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	8a9b      	ldrh	r3, [r3, #20]
 8001522:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001526:	3b04      	subs	r3, #4
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	2212      	movs	r2, #18
 800152e:	601a      	str	r2, [r3, #0]
	newTask->stackBase[newTask->stack_size - 5] = 0x00000003;          // R3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	8a9b      	ldrh	r3, [r3, #20]
 8001538:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800153c:	3b05      	subs	r3, #5
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	2203      	movs	r2, #3
 8001544:	601a      	str	r2, [r3, #0]
	newTask->stackBase[newTask->stack_size - 6] = 0x00000002;          // R2
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	8a9b      	ldrh	r3, [r3, #20]
 800154e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001552:	3b06      	subs	r3, #6
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	2202      	movs	r2, #2
 800155a:	601a      	str	r2, [r3, #0]
	newTask->stackBase[newTask->stack_size - 7] = 0x00000001;          // R1
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	8a9b      	ldrh	r3, [r3, #20]
 8001564:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001568:	3b07      	subs	r3, #7
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]
	newTask->stackBase[newTask->stack_size - 8] = 0x00000000;          // R0
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	8a9b      	ldrh	r3, [r3, #20]
 800157a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800157e:	3b08      	subs	r3, #8
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

	// Thanh ghi R4-R11 (được lưu thủ công trong context switch)
	newTask->stackBase[newTask->stack_size - 9] = 0x00000004;          // R4
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	8a9b      	ldrh	r3, [r3, #20]
 8001590:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001594:	3b09      	subs	r3, #9
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	2204      	movs	r2, #4
 800159c:	601a      	str	r2, [r3, #0]
	newTask->stackBase[newTask->stack_size - 10] = 0x00000005;         // R5
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	8a9b      	ldrh	r3, [r3, #20]
 80015a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015aa:	3b0a      	subs	r3, #10
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	2205      	movs	r2, #5
 80015b2:	601a      	str	r2, [r3, #0]
	newTask->stackBase[newTask->stack_size - 11] = 0x00000006;         // R6
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	8a9b      	ldrh	r3, [r3, #20]
 80015bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015c0:	3b0b      	subs	r3, #11
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	2206      	movs	r2, #6
 80015c8:	601a      	str	r2, [r3, #0]
	newTask->stackBase[newTask->stack_size - 12] = 0x00000007;         // R7
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	8a9b      	ldrh	r3, [r3, #20]
 80015d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015d6:	3b0c      	subs	r3, #12
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	2207      	movs	r2, #7
 80015de:	601a      	str	r2, [r3, #0]
	newTask->stackBase[newTask->stack_size - 13] = 0x00000008;         // R8
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	8a9b      	ldrh	r3, [r3, #20]
 80015e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015ec:	3b0d      	subs	r3, #13
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	2208      	movs	r2, #8
 80015f4:	601a      	str	r2, [r3, #0]
	newTask->stackBase[newTask->stack_size - 14] = 0x00000009;         // R9
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	8a9b      	ldrh	r3, [r3, #20]
 80015fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001602:	3b0e      	subs	r3, #14
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	2209      	movs	r2, #9
 800160a:	601a      	str	r2, [r3, #0]
	newTask->stackBase[newTask->stack_size - 15] = 0x0000000A;         // R10
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	8a9b      	ldrh	r3, [r3, #20]
 8001614:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001618:	3b0f      	subs	r3, #15
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	220a      	movs	r2, #10
 8001620:	601a      	str	r2, [r3, #0]
	newTask->stackBase[newTask->stack_size - 16] = 0x0000000B;         // R11
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	8a9b      	ldrh	r3, [r3, #20]
 800162a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800162e:	3b10      	subs	r3, #16
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	220b      	movs	r2, #11
 8001636:	601a      	str	r2, [r3, #0]

	// Thiết lập con trỏ ngăn xếp cho task
//	DOS_stop_kernel();
	newTask->StackPointer = &newTask->stackBase[newTask->stack_size - 8];       // Con
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	8a9b      	ldrh	r3, [r3, #20]
 8001640:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001644:	3b08      	subs	r3, #8
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	441a      	add	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	609a      	str	r2, [r3, #8]
	DOS_StoreTask(newTask);
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f000 f96c 	bl	800192c <DOS_StoreTask>
//	DOS_start_kernel();
	return newTask;
 8001654:	697b      	ldr	r3, [r7, #20]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop

08001660 <saveContext>:

void saveContext(void) {
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
    __asm volatile (
 8001664:	f3ef 8009 	mrs	r0, PSP
 8001668:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
        "mrs r0, psp \n"        // Lấy giá trị của PSP (Process Stack Pointer)
        "stmdb r0!, {r4-r11} \n"// Lưu R4-R11 vào ngăn xếp
    );
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <ContextSwitch>:

__attribute__((optimize("O3"))) void ContextSwitch(OS_task_t * Current_task, OS_task_t *nextask)
{
 8001674:	b538      	push	{r3, r4, r5, lr}
 8001676:	460d      	mov	r5, r1
	if(Current_task != NULL && Current_task->state != NONE)
 8001678:	b118      	cbz	r0, 8001682 <ContextSwitch+0xe>
 800167a:	7d83      	ldrb	r3, [r0, #22]
 800167c:	4604      	mov	r4, r0
 800167e:	2b04      	cmp	r3, #4
 8001680:	d103      	bne.n	800168a <ContextSwitch+0x16>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001682:	68ab      	ldr	r3, [r5, #8]
 8001684:	f383 8809 	msr	PSP, r3
		saveContext();
		Current_task->StackPointer = (uint32_t*)__get_PSP();
	}
	__set_PSP((uint32_t)nextask->StackPointer);
	
}
 8001688:	bd38      	pop	{r3, r4, r5, pc}
		saveContext();
 800168a:	f7ff ffe9 	bl	8001660 <saveContext>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800168e:	f3ef 8309 	mrs	r3, PSP
		Current_task->StackPointer = (uint32_t*)__get_PSP();
 8001692:	60a3      	str	r3, [r4, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001694:	68ab      	ldr	r3, [r5, #8]
 8001696:	f383 8809 	msr	PSP, r3
}
 800169a:	bd38      	pop	{r3, r4, r5, pc}

0800169c <switch_task>:

void switch_task(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
	// __asm("svc #0");
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; // Đặt bit PendSVSET trong ICSR
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <switch_task+0x18>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <switch_task+0x18>)
 80016a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016aa:	6053      	str	r3, [r2, #4]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Task_handle>:

void Task_handle(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
	OS_task_t *Task_ptr = NULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
	for(uint8_t count = 0; count < Tasks_Block->Numlist; count ++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	e02c      	b.n	8001722 <Task_handle+0x6a>
	{
		Task_ptr = (OS_task_t *)List_PtrObj(Tasks_Block, count);
 80016c8:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <Task_handle+0x138>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	b292      	uxth	r2, r2
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fe1a 	bl	800130c <List_PtrObj>
 80016d8:	4603      	mov	r3, r0
 80016da:	603b      	str	r3, [r7, #0]
		if(Task_ptr == NULL)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d027      	beq.n	8001732 <Task_handle+0x7a>
		{
			break;
		}
		if(Task_ptr->state!= SURPEND && (-- Task_ptr->timeSleep <= 0))
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	7d9b      	ldrb	r3, [r3, #22]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d018      	beq.n	800171c <Task_handle+0x64>
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	6913      	ldr	r3, [r2, #16]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	6113      	str	r3, [r2, #16]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	dc12      	bgt.n	800171c <Task_handle+0x64>
		{
			List_GetObj(Tasks_Block, count, (void *)&Task_ptr);
 80016f6:	4b3e      	ldr	r3, [pc, #248]	; (80017f0 <Task_handle+0x138>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	79fa      	ldrb	r2, [r7, #7]
 80016fc:	b291      	uxth	r1, r2
 80016fe:	463a      	mov	r2, r7
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fd77 	bl	80011f4 <List_GetObj>
			DOS_StoreTask(Task_ptr);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f000 f90f 	bl	800192c <DOS_StoreTask>
			Task_ptr->timeSleep = 0;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
			count --;
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	3b01      	subs	r3, #1
 8001718:	71fb      	strb	r3, [r7, #7]
			continue;
 800171a:	bf00      	nop
	for(uint8_t count = 0; count < Tasks_Block->Numlist; count ++)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	3301      	adds	r3, #1
 8001720:	71fb      	strb	r3, [r7, #7]
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	b29a      	uxth	r2, r3
 8001726:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <Task_handle+0x138>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	889b      	ldrh	r3, [r3, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	d3cb      	bcc.n	80016c8 <Task_handle+0x10>
 8001730:	e000      	b.n	8001734 <Task_handle+0x7c>
			break;
 8001732:	bf00      	nop
		}
	}
	if(List_GetObj(Tasks_Ready, 0xFF, (void *)&Task_next) == 1)
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <Task_handle+0x13c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a2f      	ldr	r2, [pc, #188]	; (80017f8 <Task_handle+0x140>)
 800173a:	21ff      	movs	r1, #255	; 0xff
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fd59 	bl	80011f4 <List_GetObj>
 8001742:	4603      	mov	r3, r0
 8001744:	2b01      	cmp	r3, #1
 8001746:	d14f      	bne.n	80017e8 <Task_handle+0x130>
	{
		Task_next->state = READY;
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <Task_handle+0x140>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2201      	movs	r2, #1
 800174e:	759a      	strb	r2, [r3, #22]
		if(Task_running->state != NONE)
 8001750:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <Task_handle+0x144>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	7d9b      	ldrb	r3, [r3, #22]
 8001756:	2b04      	cmp	r3, #4
 8001758:	d032      	beq.n	80017c0 <Task_handle+0x108>
		{
			if(Task_running->state == RUNNING)
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <Task_handle+0x144>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	7d9b      	ldrb	r3, [r3, #22]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d116      	bne.n	8001792 <Task_handle+0xda>
			{
				if(Task_next->piority >= Task_running->piority)
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <Task_handle+0x140>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	7dda      	ldrb	r2, [r3, #23]
 800176a:	4b24      	ldr	r3, [pc, #144]	; (80017fc <Task_handle+0x144>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	7ddb      	ldrb	r3, [r3, #23]
 8001770:	429a      	cmp	r2, r3
 8001772:	d308      	bcc.n	8001786 <Task_handle+0xce>
				{
					Task_running->state = READY;
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <Task_handle+0x144>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2201      	movs	r2, #1
 800177a:	759a      	strb	r2, [r3, #22]
					Task_next->state = RUNNING;
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <Task_handle+0x140>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2200      	movs	r2, #0
 8001782:	759a      	strb	r2, [r3, #22]
 8001784:	e005      	b.n	8001792 <Task_handle+0xda>
				}
				else
				{
					DOS_StoreTask(Task_next);
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <Task_handle+0x140>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f8ce 	bl	800192c <DOS_StoreTask>
					return;
 8001790:	e02b      	b.n	80017ea <Task_handle+0x132>
				}
			}
			if(Task_running->state != RUNNING)
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <Task_handle+0x144>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	7d9b      	ldrb	r3, [r3, #22]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d022      	beq.n	80017e2 <Task_handle+0x12a>
			{
				Task_temp = Task_running;
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <Task_handle+0x144>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a17      	ldr	r2, [pc, #92]	; (8001800 <Task_handle+0x148>)
 80017a2:	6013      	str	r3, [r2, #0]
				Task_running = Task_next;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <Task_handle+0x140>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <Task_handle+0x144>)
 80017aa:	6013      	str	r3, [r2, #0]
				Task_running->state = RUNNING;
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <Task_handle+0x144>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2200      	movs	r2, #0
 80017b2:	759a      	strb	r2, [r3, #22]
				DOS_StoreTask(Task_temp);
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <Task_handle+0x148>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f8b7 	bl	800192c <DOS_StoreTask>
 80017be:	e010      	b.n	80017e2 <Task_handle+0x12a>
			}
		}
		else
		{
			Task_temp = Task_running;
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <Task_handle+0x144>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <Task_handle+0x148>)
 80017c6:	6013      	str	r3, [r2, #0]
			Task_running = Task_next;
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <Task_handle+0x140>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <Task_handle+0x144>)
 80017ce:	6013      	str	r3, [r2, #0]
			Task_running->state = RUNNING;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <Task_handle+0x144>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2200      	movs	r2, #0
 80017d6:	759a      	strb	r2, [r3, #22]
			DOS_StoreTask(Task_temp);
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <Task_handle+0x148>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f8a5 	bl	800192c <DOS_StoreTask>
	{

		return;
	}

	switch_task();
 80017e2:	f7ff ff5b 	bl	800169c <switch_task>
 80017e6:	e000      	b.n	80017ea <Task_handle+0x132>
		return;
 80017e8:	bf00      	nop
}
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200000f8 	.word	0x200000f8
 80017f4:	200000f4 	.word	0x200000f4
 80017f8:	200000f0 	.word	0x200000f0
 80017fc:	200000e8 	.word	0x200000e8
 8001800:	200000ec 	.word	0x200000ec

08001804 <DOS_GetTaskRunnung>:

OS_task_t * DOS_GetTaskRunnung(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	return Task_running;
 8001808:	4b02      	ldr	r3, [pc, #8]	; (8001814 <DOS_GetTaskRunnung+0x10>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	200000e8 	.word	0x200000e8

08001818 <DOS_start_kernel>:


void DOS_start_kernel(void) {
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;  // Set bit để enable ngắt SysTick
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <DOS_start_kernel+0x18>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a03      	ldr	r2, [pc, #12]	; (8001830 <DOS_start_kernel+0x18>)
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	e000e010 	.word	0xe000e010

08001834 <DOS_stop_kernel>:

void DOS_stop_kernel(void) {
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
    SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;  // Clear bit để disable ngắt SysTick
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <DOS_stop_kernel+0x18>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a03      	ldr	r2, [pc, #12]	; (800184c <DOS_stop_kernel+0x18>)
 800183e:	f023 0302 	bic.w	r3, r3, #2
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	e000e010 	.word	0xe000e010

08001850 <DOS_TaskSuspend>:
void DOS_TaskSuspend(OS_task_t *task)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	DOS_stop_kernel();
 8001858:	f7ff ffec 	bl	8001834 <DOS_stop_kernel>
	if(task->state != SURPEND)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7d9b      	ldrb	r3, [r3, #22]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d038      	beq.n	80018d6 <DOS_TaskSuspend+0x86>
	{
		task->state = SURPEND;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	759a      	strb	r2, [r3, #22]
		if(task == Task_running)
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <DOS_TaskSuspend+0x90>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	d123      	bne.n	80018bc <DOS_TaskSuspend+0x6c>
		{
			if(List_GetObj(Tasks_Ready, 0xFF, (void *)&Task_next) == 1)
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <DOS_TaskSuspend+0x94>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <DOS_TaskSuspend+0x98>)
 800187a:	21ff      	movs	r1, #255	; 0xff
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fcb9 	bl	80011f4 <List_GetObj>
 8001882:	4603      	mov	r3, r0
 8001884:	2b01      	cmp	r3, #1
 8001886:	d114      	bne.n	80018b2 <DOS_TaskSuspend+0x62>
			{
				Task_next->state = READY;
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <DOS_TaskSuspend+0x98>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2201      	movs	r2, #1
 800188e:	759a      	strb	r2, [r3, #22]
				Task_temp = Task_running;
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <DOS_TaskSuspend+0x90>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a15      	ldr	r2, [pc, #84]	; (80018ec <DOS_TaskSuspend+0x9c>)
 8001896:	6013      	str	r3, [r2, #0]
				Task_running = Task_next;
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <DOS_TaskSuspend+0x98>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <DOS_TaskSuspend+0x90>)
 800189e:	6013      	str	r3, [r2, #0]
				Task_running->state = RUNNING;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <DOS_TaskSuspend+0x90>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2200      	movs	r2, #0
 80018a6:	759a      	strb	r2, [r3, #22]
				DOS_StoreTask( Task_temp);
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <DOS_TaskSuspend+0x9c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f83d 	bl	800192c <DOS_StoreTask>
			}
			DOS_start_kernel();
 80018b2:	f7ff ffb1 	bl	8001818 <DOS_start_kernel>
			switch_task();
 80018b6:	f7ff fef1 	bl	800169c <switch_task>
			List_deleteObj(Tasks_Ready, task);
			DOS_StoreTask(task);
		}
	}

}
 80018ba:	e00c      	b.n	80018d6 <DOS_TaskSuspend+0x86>
		else if(task->timeSleep <= 0)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	dc08      	bgt.n	80018d6 <DOS_TaskSuspend+0x86>
			List_deleteObj(Tasks_Ready, task);
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <DOS_TaskSuspend+0x94>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fd4f 	bl	800136e <List_deleteObj>
			DOS_StoreTask(task);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f82b 	bl	800192c <DOS_StoreTask>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200000e8 	.word	0x200000e8
 80018e4:	200000f4 	.word	0x200000f4
 80018e8:	200000f0 	.word	0x200000f0
 80018ec:	200000ec 	.word	0x200000ec

080018f0 <DOS_TaskResume>:



void DOS_TaskResume(OS_task_t *task)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	if(task->state == SURPEND)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7d9b      	ldrb	r3, [r3, #22]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d10f      	bne.n	8001920 <DOS_TaskResume+0x30>
	{
		if(task->timeSleep <= 0)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	dc0b      	bgt.n	8001920 <DOS_TaskResume+0x30>
		{
			task->state = READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	759a      	strb	r2, [r3, #22]
			List_deleteObj(Tasks_Block, task);
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <DOS_TaskResume+0x38>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fd2a 	bl	800136e <List_deleteObj>
			DOS_StoreTask(task);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f806 	bl	800192c <DOS_StoreTask>
		}

	}
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200000f8 	.word	0x200000f8

0800192c <DOS_StoreTask>:

void DOS_StoreTask(OS_task_t *task)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	OS_task_t *pTask = NULL;
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
	uint8_t pos = 0xFF;
 8001938:	23ff      	movs	r3, #255	; 0xff
 800193a:	73fb      	strb	r3, [r7, #15]
	if(task->timeSleep <= 0 && task->state != SURPEND)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	dc2b      	bgt.n	800199c <DOS_StoreTask+0x70>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7d9b      	ldrb	r3, [r3, #22]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d027      	beq.n	800199c <DOS_StoreTask+0x70>
	{
		for(uint8_t count = 0; count < Tasks_Ready->Numlist; count ++)
 800194c:	2300      	movs	r3, #0
 800194e:	73bb      	strb	r3, [r7, #14]
 8001950:	e014      	b.n	800197c <DOS_StoreTask+0x50>
		{
			pTask = List_PtrObj(Tasks_Ready, count);
 8001952:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <DOS_StoreTask+0xcc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	7bba      	ldrb	r2, [r7, #14]
 8001958:	b292      	uxth	r2, r2
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fcd5 	bl	800130c <List_PtrObj>
 8001962:	60b8      	str	r0, [r7, #8]
			if(task->piority <= pTask->piority)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7dda      	ldrb	r2, [r3, #23]
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	7ddb      	ldrb	r3, [r3, #23]
 800196c:	429a      	cmp	r2, r3
 800196e:	d802      	bhi.n	8001976 <DOS_StoreTask+0x4a>
			{
				pos = count;
 8001970:	7bbb      	ldrb	r3, [r7, #14]
 8001972:	73fb      	strb	r3, [r7, #15]
				break;
 8001974:	e009      	b.n	800198a <DOS_StoreTask+0x5e>
		for(uint8_t count = 0; count < Tasks_Ready->Numlist; count ++)
 8001976:	7bbb      	ldrb	r3, [r7, #14]
 8001978:	3301      	adds	r3, #1
 800197a:	73bb      	strb	r3, [r7, #14]
 800197c:	7bbb      	ldrb	r3, [r7, #14]
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <DOS_StoreTask+0xcc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	889b      	ldrh	r3, [r3, #4]
 8001986:	429a      	cmp	r2, r3
 8001988:	d3e3      	bcc.n	8001952 <DOS_StoreTask+0x26>
			}
		}
		List_AddObj(Tasks_Ready, pos, task);
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <DOS_StoreTask+0xcc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	b291      	uxth	r1, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fbb7 	bl	8001108 <List_AddObj>
 800199a:	e028      	b.n	80019ee <DOS_StoreTask+0xc2>
	}
	else
	{
		for(uint8_t count = 0; count < Tasks_Block->Numlist; count ++)
 800199c:	2300      	movs	r3, #0
 800199e:	737b      	strb	r3, [r7, #13]
 80019a0:	e015      	b.n	80019ce <DOS_StoreTask+0xa2>
		{
			pTask = List_PtrObj(Tasks_Block, count);
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <DOS_StoreTask+0xd0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	7b7a      	ldrb	r2, [r7, #13]
 80019a8:	b292      	uxth	r2, r2
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fcad 	bl	800130c <List_PtrObj>
 80019b2:	60b8      	str	r0, [r7, #8]
			if(task->piority < pTask->piority)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7dda      	ldrb	r2, [r3, #23]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	7ddb      	ldrb	r3, [r3, #23]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d203      	bcs.n	80019c8 <DOS_StoreTask+0x9c>
			{
				pos = count + 1;
 80019c0:	7b7b      	ldrb	r3, [r7, #13]
 80019c2:	3301      	adds	r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
				break;
 80019c6:	e009      	b.n	80019dc <DOS_StoreTask+0xb0>
		for(uint8_t count = 0; count < Tasks_Block->Numlist; count ++)
 80019c8:	7b7b      	ldrb	r3, [r7, #13]
 80019ca:	3301      	adds	r3, #1
 80019cc:	737b      	strb	r3, [r7, #13]
 80019ce:	7b7b      	ldrb	r3, [r7, #13]
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <DOS_StoreTask+0xd0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	889b      	ldrh	r3, [r3, #4]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d3e2      	bcc.n	80019a2 <DOS_StoreTask+0x76>
			}
		}

		List_AddObj(Tasks_Block, pos, task);
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <DOS_StoreTask+0xd0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	b291      	uxth	r1, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fb8e 	bl	8001108 <List_AddObj>
	}
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200000f4 	.word	0x200000f4
 80019fc:	200000f8 	.word	0x200000f8

08001a00 <task_sleep>:


void task_sleep(uint32_t time)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	DOS_stop_kernel();
 8001a08:	f7ff ff14 	bl	8001834 <DOS_stop_kernel>
	Task_running->timeSleep = time;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <task_sleep+0x6c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	611a      	str	r2, [r3, #16]
	Task_running->state = BLOCK;
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <task_sleep+0x6c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2203      	movs	r2, #3
 8001a1a:	759a      	strb	r2, [r3, #22]
	if(List_GetObj(Tasks_Ready, 0xFF, (void *)&Task_next) == 1)
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <task_sleep+0x70>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <task_sleep+0x74>)
 8001a22:	21ff      	movs	r1, #255	; 0xff
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fbe5 	bl	80011f4 <List_GetObj>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d114      	bne.n	8001a5a <task_sleep+0x5a>
	{
		Task_next->state = READY;
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <task_sleep+0x74>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2201      	movs	r2, #1
 8001a36:	759a      	strb	r2, [r3, #22]
		Task_temp = Task_running;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <task_sleep+0x6c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <task_sleep+0x78>)
 8001a3e:	6013      	str	r3, [r2, #0]
		Task_running = Task_next;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <task_sleep+0x74>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <task_sleep+0x6c>)
 8001a46:	6013      	str	r3, [r2, #0]
		Task_running->state = RUNNING;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <task_sleep+0x6c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	759a      	strb	r2, [r3, #22]
		DOS_StoreTask( Task_temp);
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <task_sleep+0x78>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff69 	bl	800192c <DOS_StoreTask>
	}
	DOS_start_kernel();
 8001a5a:	f7ff fedd 	bl	8001818 <DOS_start_kernel>
	switch_task();
 8001a5e:	f7ff fe1d 	bl	800169c <switch_task>

}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200000e8 	.word	0x200000e8
 8001a70:	200000f4 	.word	0x200000f4
 8001a74:	200000f0 	.word	0x200000f0
 8001a78:	200000ec 	.word	0x200000ec

08001a7c <MiniOS_TaskIdle>:

void MiniOS_TaskIdle(void) {
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

    while(1)
 8001a80:	e7fe      	b.n	8001a80 <MiniOS_TaskIdle+0x4>
 8001a82:	bf00      	nop

08001a84 <SysTick_Handler>:

    }
}

void SysTick_Handler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_GetTick();
 8001a88:	f7fe fdf0 	bl	800066c <HAL_GetTick>
//  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */
//	tasks[currentTask].stack = __get_PSP();
//	__set_PSP(tasks[nextTask].stack);

	Task_handle();
 8001a8c:	f7ff fe14 	bl	80016b8 <Task_handle>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
	ContextSwitch(Task_temp, Task_running);
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <PendSV_Handler+0x18>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <PendSV_Handler+0x1c>)
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fde6 	bl	8001674 <ContextSwitch>


  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200000ec 	.word	0x200000ec
 8001ab0:	200000e8 	.word	0x200000e8

08001ab4 <Mutex_create>:
#include "mutex.h"

Mutex_t* Mutex_create(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
	Mutex_t* newMutex = (Mutex_t *)malloc(sizeof(Mutex_t));
 8001aba:	200c      	movs	r0, #12
 8001abc:	f000 f862 	bl	8001b84 <malloc>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	607b      	str	r3, [r7, #4]
	newMutex->state = 1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	721a      	strb	r2, [r3, #8]
	newMutex->ListTaskwait = newMList();
 8001aca:	f7ff faf5 	bl	80010b8 <newMList>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	601a      	str	r2, [r3, #0]
	newMutex->TaskTake = NULL;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
	return newMutex;
 8001ada:	687b      	ldr	r3, [r7, #4]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <Mutex_Take>:
void Mutex_Take(Mutex_t* mutex)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	DOS_stop_kernel();
 8001aec:	f7ff fea2 	bl	8001834 <DOS_stop_kernel>
	OS_task_t * Tasptr = DOS_GetTaskRunnung();
 8001af0:	f7ff fe88 	bl	8001804 <DOS_GetTaskRunnung>
 8001af4:	60f8      	str	r0, [r7, #12]
	if(mutex->state == 1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7a1b      	ldrb	r3, [r3, #8]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d108      	bne.n	8001b10 <Mutex_Take+0x2c>
	{
		mutex->state = 0;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	721a      	strb	r2, [r3, #8]
		mutex->TaskTake = Tasptr;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	605a      	str	r2, [r3, #4]
		DOS_start_kernel();
 8001b0a:	f7ff fe85 	bl	8001818 <DOS_start_kernel>
		List_AddObj(mutex->ListTaskwait, 0xFF, Tasptr);
		DOS_start_kernel();
		DOS_TaskSuspend(Tasptr);
	}

}
 8001b0e:	e00b      	b.n	8001b28 <Mutex_Take+0x44>
		List_AddObj(mutex->ListTaskwait, 0xFF, Tasptr);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	21ff      	movs	r1, #255	; 0xff
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff faf5 	bl	8001108 <List_AddObj>
		DOS_start_kernel();
 8001b1e:	f7ff fe7b 	bl	8001818 <DOS_start_kernel>
		DOS_TaskSuspend(Tasptr);
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f7ff fe94 	bl	8001850 <DOS_TaskSuspend>
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <Mutex_Give>:
void Mutex_Give(Mutex_t* mutex)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	DOS_stop_kernel();
 8001b38:	f7ff fe7c 	bl	8001834 <DOS_stop_kernel>
	OS_task_t * TasRunptr = DOS_GetTaskRunnung();
 8001b3c:	f7ff fe62 	bl	8001804 <DOS_GetTaskRunnung>
 8001b40:	60f8      	str	r0, [r7, #12]
	OS_task_t * TasWait_ptr = NULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
	if(TasRunptr != mutex->TaskTake)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d114      	bne.n	8001b7a <Mutex_Give+0x4a>
	{
		return;
	}
	if(List_GetObj(mutex->ListTaskwait, 0, (void *)&TasWait_ptr) == 1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f107 0208 	add.w	r2, r7, #8
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fb4a 	bl	80011f4 <List_GetObj>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d106      	bne.n	8001b74 <Mutex_Give+0x44>
	{
		DOS_TaskResume(TasWait_ptr);
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fec1 	bl	80018f0 <DOS_TaskResume>
		mutex->TaskTake = TasWait_ptr;
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]
	}

	DOS_start_kernel();
 8001b74:	f7ff fe50 	bl	8001818 <DOS_start_kernel>
 8001b78:	e000      	b.n	8001b7c <Mutex_Give+0x4c>
		return;
 8001b7a:	bf00      	nop
}
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <malloc>:
 8001b84:	4b02      	ldr	r3, [pc, #8]	; (8001b90 <malloc+0xc>)
 8001b86:	4601      	mov	r1, r0
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	f000 b82b 	b.w	8001be4 <_malloc_r>
 8001b8e:	bf00      	nop
 8001b90:	20000058 	.word	0x20000058

08001b94 <free>:
 8001b94:	4b02      	ldr	r3, [pc, #8]	; (8001ba0 <free+0xc>)
 8001b96:	4601      	mov	r1, r0
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	f000 b8f3 	b.w	8001d84 <_free_r>
 8001b9e:	bf00      	nop
 8001ba0:	20000058 	.word	0x20000058

08001ba4 <sbrk_aligned>:
 8001ba4:	b570      	push	{r4, r5, r6, lr}
 8001ba6:	4e0e      	ldr	r6, [pc, #56]	; (8001be0 <sbrk_aligned+0x3c>)
 8001ba8:	460c      	mov	r4, r1
 8001baa:	6831      	ldr	r1, [r6, #0]
 8001bac:	4605      	mov	r5, r0
 8001bae:	b911      	cbnz	r1, 8001bb6 <sbrk_aligned+0x12>
 8001bb0:	f000 f8ac 	bl	8001d0c <_sbrk_r>
 8001bb4:	6030      	str	r0, [r6, #0]
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	4628      	mov	r0, r5
 8001bba:	f000 f8a7 	bl	8001d0c <_sbrk_r>
 8001bbe:	1c43      	adds	r3, r0, #1
 8001bc0:	d00a      	beq.n	8001bd8 <sbrk_aligned+0x34>
 8001bc2:	1cc4      	adds	r4, r0, #3
 8001bc4:	f024 0403 	bic.w	r4, r4, #3
 8001bc8:	42a0      	cmp	r0, r4
 8001bca:	d007      	beq.n	8001bdc <sbrk_aligned+0x38>
 8001bcc:	1a21      	subs	r1, r4, r0
 8001bce:	4628      	mov	r0, r5
 8001bd0:	f000 f89c 	bl	8001d0c <_sbrk_r>
 8001bd4:	3001      	adds	r0, #1
 8001bd6:	d101      	bne.n	8001bdc <sbrk_aligned+0x38>
 8001bd8:	f04f 34ff 	mov.w	r4, #4294967295
 8001bdc:	4620      	mov	r0, r4
 8001bde:	bd70      	pop	{r4, r5, r6, pc}
 8001be0:	20000100 	.word	0x20000100

08001be4 <_malloc_r>:
 8001be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001be8:	1ccd      	adds	r5, r1, #3
 8001bea:	f025 0503 	bic.w	r5, r5, #3
 8001bee:	3508      	adds	r5, #8
 8001bf0:	2d0c      	cmp	r5, #12
 8001bf2:	bf38      	it	cc
 8001bf4:	250c      	movcc	r5, #12
 8001bf6:	2d00      	cmp	r5, #0
 8001bf8:	4607      	mov	r7, r0
 8001bfa:	db01      	blt.n	8001c00 <_malloc_r+0x1c>
 8001bfc:	42a9      	cmp	r1, r5
 8001bfe:	d905      	bls.n	8001c0c <_malloc_r+0x28>
 8001c00:	230c      	movs	r3, #12
 8001c02:	2600      	movs	r6, #0
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	4630      	mov	r0, r6
 8001c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001ce0 <_malloc_r+0xfc>
 8001c10:	f000 f868 	bl	8001ce4 <__malloc_lock>
 8001c14:	f8d8 3000 	ldr.w	r3, [r8]
 8001c18:	461c      	mov	r4, r3
 8001c1a:	bb5c      	cbnz	r4, 8001c74 <_malloc_r+0x90>
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	4638      	mov	r0, r7
 8001c20:	f7ff ffc0 	bl	8001ba4 <sbrk_aligned>
 8001c24:	1c43      	adds	r3, r0, #1
 8001c26:	4604      	mov	r4, r0
 8001c28:	d155      	bne.n	8001cd6 <_malloc_r+0xf2>
 8001c2a:	f8d8 4000 	ldr.w	r4, [r8]
 8001c2e:	4626      	mov	r6, r4
 8001c30:	2e00      	cmp	r6, #0
 8001c32:	d145      	bne.n	8001cc0 <_malloc_r+0xdc>
 8001c34:	2c00      	cmp	r4, #0
 8001c36:	d048      	beq.n	8001cca <_malloc_r+0xe6>
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	4631      	mov	r1, r6
 8001c3c:	4638      	mov	r0, r7
 8001c3e:	eb04 0903 	add.w	r9, r4, r3
 8001c42:	f000 f863 	bl	8001d0c <_sbrk_r>
 8001c46:	4581      	cmp	r9, r0
 8001c48:	d13f      	bne.n	8001cca <_malloc_r+0xe6>
 8001c4a:	6821      	ldr	r1, [r4, #0]
 8001c4c:	4638      	mov	r0, r7
 8001c4e:	1a6d      	subs	r5, r5, r1
 8001c50:	4629      	mov	r1, r5
 8001c52:	f7ff ffa7 	bl	8001ba4 <sbrk_aligned>
 8001c56:	3001      	adds	r0, #1
 8001c58:	d037      	beq.n	8001cca <_malloc_r+0xe6>
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	442b      	add	r3, r5
 8001c5e:	6023      	str	r3, [r4, #0]
 8001c60:	f8d8 3000 	ldr.w	r3, [r8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d038      	beq.n	8001cda <_malloc_r+0xf6>
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	42a2      	cmp	r2, r4
 8001c6c:	d12b      	bne.n	8001cc6 <_malloc_r+0xe2>
 8001c6e:	2200      	movs	r2, #0
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	e00f      	b.n	8001c94 <_malloc_r+0xb0>
 8001c74:	6822      	ldr	r2, [r4, #0]
 8001c76:	1b52      	subs	r2, r2, r5
 8001c78:	d41f      	bmi.n	8001cba <_malloc_r+0xd6>
 8001c7a:	2a0b      	cmp	r2, #11
 8001c7c:	d917      	bls.n	8001cae <_malloc_r+0xca>
 8001c7e:	1961      	adds	r1, r4, r5
 8001c80:	42a3      	cmp	r3, r4
 8001c82:	6025      	str	r5, [r4, #0]
 8001c84:	bf18      	it	ne
 8001c86:	6059      	strne	r1, [r3, #4]
 8001c88:	6863      	ldr	r3, [r4, #4]
 8001c8a:	bf08      	it	eq
 8001c8c:	f8c8 1000 	streq.w	r1, [r8]
 8001c90:	5162      	str	r2, [r4, r5]
 8001c92:	604b      	str	r3, [r1, #4]
 8001c94:	4638      	mov	r0, r7
 8001c96:	f104 060b 	add.w	r6, r4, #11
 8001c9a:	f000 f829 	bl	8001cf0 <__malloc_unlock>
 8001c9e:	f026 0607 	bic.w	r6, r6, #7
 8001ca2:	1d23      	adds	r3, r4, #4
 8001ca4:	1af2      	subs	r2, r6, r3
 8001ca6:	d0ae      	beq.n	8001c06 <_malloc_r+0x22>
 8001ca8:	1b9b      	subs	r3, r3, r6
 8001caa:	50a3      	str	r3, [r4, r2]
 8001cac:	e7ab      	b.n	8001c06 <_malloc_r+0x22>
 8001cae:	42a3      	cmp	r3, r4
 8001cb0:	6862      	ldr	r2, [r4, #4]
 8001cb2:	d1dd      	bne.n	8001c70 <_malloc_r+0x8c>
 8001cb4:	f8c8 2000 	str.w	r2, [r8]
 8001cb8:	e7ec      	b.n	8001c94 <_malloc_r+0xb0>
 8001cba:	4623      	mov	r3, r4
 8001cbc:	6864      	ldr	r4, [r4, #4]
 8001cbe:	e7ac      	b.n	8001c1a <_malloc_r+0x36>
 8001cc0:	4634      	mov	r4, r6
 8001cc2:	6876      	ldr	r6, [r6, #4]
 8001cc4:	e7b4      	b.n	8001c30 <_malloc_r+0x4c>
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	e7cc      	b.n	8001c64 <_malloc_r+0x80>
 8001cca:	230c      	movs	r3, #12
 8001ccc:	4638      	mov	r0, r7
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	f000 f80e 	bl	8001cf0 <__malloc_unlock>
 8001cd4:	e797      	b.n	8001c06 <_malloc_r+0x22>
 8001cd6:	6025      	str	r5, [r4, #0]
 8001cd8:	e7dc      	b.n	8001c94 <_malloc_r+0xb0>
 8001cda:	605b      	str	r3, [r3, #4]
 8001cdc:	deff      	udf	#255	; 0xff
 8001cde:	bf00      	nop
 8001ce0:	200000fc 	.word	0x200000fc

08001ce4 <__malloc_lock>:
 8001ce4:	4801      	ldr	r0, [pc, #4]	; (8001cec <__malloc_lock+0x8>)
 8001ce6:	f000 b84b 	b.w	8001d80 <__retarget_lock_acquire_recursive>
 8001cea:	bf00      	nop
 8001cec:	20000240 	.word	0x20000240

08001cf0 <__malloc_unlock>:
 8001cf0:	4801      	ldr	r0, [pc, #4]	; (8001cf8 <__malloc_unlock+0x8>)
 8001cf2:	f000 b846 	b.w	8001d82 <__retarget_lock_release_recursive>
 8001cf6:	bf00      	nop
 8001cf8:	20000240 	.word	0x20000240

08001cfc <memset>:
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4402      	add	r2, r0
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d100      	bne.n	8001d06 <memset+0xa>
 8001d04:	4770      	bx	lr
 8001d06:	f803 1b01 	strb.w	r1, [r3], #1
 8001d0a:	e7f9      	b.n	8001d00 <memset+0x4>

08001d0c <_sbrk_r>:
 8001d0c:	b538      	push	{r3, r4, r5, lr}
 8001d0e:	2300      	movs	r3, #0
 8001d10:	4d05      	ldr	r5, [pc, #20]	; (8001d28 <_sbrk_r+0x1c>)
 8001d12:	4604      	mov	r4, r0
 8001d14:	4608      	mov	r0, r1
 8001d16:	602b      	str	r3, [r5, #0]
 8001d18:	f7fe fc00 	bl	800051c <_sbrk>
 8001d1c:	1c43      	adds	r3, r0, #1
 8001d1e:	d102      	bne.n	8001d26 <_sbrk_r+0x1a>
 8001d20:	682b      	ldr	r3, [r5, #0]
 8001d22:	b103      	cbz	r3, 8001d26 <_sbrk_r+0x1a>
 8001d24:	6023      	str	r3, [r4, #0]
 8001d26:	bd38      	pop	{r3, r4, r5, pc}
 8001d28:	2000023c 	.word	0x2000023c

08001d2c <__errno>:
 8001d2c:	4b01      	ldr	r3, [pc, #4]	; (8001d34 <__errno+0x8>)
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000058 	.word	0x20000058

08001d38 <__libc_init_array>:
 8001d38:	b570      	push	{r4, r5, r6, lr}
 8001d3a:	2600      	movs	r6, #0
 8001d3c:	4d0c      	ldr	r5, [pc, #48]	; (8001d70 <__libc_init_array+0x38>)
 8001d3e:	4c0d      	ldr	r4, [pc, #52]	; (8001d74 <__libc_init_array+0x3c>)
 8001d40:	1b64      	subs	r4, r4, r5
 8001d42:	10a4      	asrs	r4, r4, #2
 8001d44:	42a6      	cmp	r6, r4
 8001d46:	d109      	bne.n	8001d5c <__libc_init_array+0x24>
 8001d48:	f000 f864 	bl	8001e14 <_init>
 8001d4c:	2600      	movs	r6, #0
 8001d4e:	4d0a      	ldr	r5, [pc, #40]	; (8001d78 <__libc_init_array+0x40>)
 8001d50:	4c0a      	ldr	r4, [pc, #40]	; (8001d7c <__libc_init_array+0x44>)
 8001d52:	1b64      	subs	r4, r4, r5
 8001d54:	10a4      	asrs	r4, r4, #2
 8001d56:	42a6      	cmp	r6, r4
 8001d58:	d105      	bne.n	8001d66 <__libc_init_array+0x2e>
 8001d5a:	bd70      	pop	{r4, r5, r6, pc}
 8001d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d60:	4798      	blx	r3
 8001d62:	3601      	adds	r6, #1
 8001d64:	e7ee      	b.n	8001d44 <__libc_init_array+0xc>
 8001d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d6a:	4798      	blx	r3
 8001d6c:	3601      	adds	r6, #1
 8001d6e:	e7f2      	b.n	8001d56 <__libc_init_array+0x1e>
 8001d70:	08001eac 	.word	0x08001eac
 8001d74:	08001eac 	.word	0x08001eac
 8001d78:	08001eac 	.word	0x08001eac
 8001d7c:	08001eb0 	.word	0x08001eb0

08001d80 <__retarget_lock_acquire_recursive>:
 8001d80:	4770      	bx	lr

08001d82 <__retarget_lock_release_recursive>:
 8001d82:	4770      	bx	lr

08001d84 <_free_r>:
 8001d84:	b538      	push	{r3, r4, r5, lr}
 8001d86:	4605      	mov	r5, r0
 8001d88:	2900      	cmp	r1, #0
 8001d8a:	d040      	beq.n	8001e0e <_free_r+0x8a>
 8001d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d90:	1f0c      	subs	r4, r1, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	bfb8      	it	lt
 8001d96:	18e4      	addlt	r4, r4, r3
 8001d98:	f7ff ffa4 	bl	8001ce4 <__malloc_lock>
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <_free_r+0x8c>)
 8001d9e:	6813      	ldr	r3, [r2, #0]
 8001da0:	b933      	cbnz	r3, 8001db0 <_free_r+0x2c>
 8001da2:	6063      	str	r3, [r4, #4]
 8001da4:	6014      	str	r4, [r2, #0]
 8001da6:	4628      	mov	r0, r5
 8001da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dac:	f7ff bfa0 	b.w	8001cf0 <__malloc_unlock>
 8001db0:	42a3      	cmp	r3, r4
 8001db2:	d908      	bls.n	8001dc6 <_free_r+0x42>
 8001db4:	6820      	ldr	r0, [r4, #0]
 8001db6:	1821      	adds	r1, r4, r0
 8001db8:	428b      	cmp	r3, r1
 8001dba:	bf01      	itttt	eq
 8001dbc:	6819      	ldreq	r1, [r3, #0]
 8001dbe:	685b      	ldreq	r3, [r3, #4]
 8001dc0:	1809      	addeq	r1, r1, r0
 8001dc2:	6021      	streq	r1, [r4, #0]
 8001dc4:	e7ed      	b.n	8001da2 <_free_r+0x1e>
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	b10b      	cbz	r3, 8001dd0 <_free_r+0x4c>
 8001dcc:	42a3      	cmp	r3, r4
 8001dce:	d9fa      	bls.n	8001dc6 <_free_r+0x42>
 8001dd0:	6811      	ldr	r1, [r2, #0]
 8001dd2:	1850      	adds	r0, r2, r1
 8001dd4:	42a0      	cmp	r0, r4
 8001dd6:	d10b      	bne.n	8001df0 <_free_r+0x6c>
 8001dd8:	6820      	ldr	r0, [r4, #0]
 8001dda:	4401      	add	r1, r0
 8001ddc:	1850      	adds	r0, r2, r1
 8001dde:	4283      	cmp	r3, r0
 8001de0:	6011      	str	r1, [r2, #0]
 8001de2:	d1e0      	bne.n	8001da6 <_free_r+0x22>
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4408      	add	r0, r1
 8001dea:	6010      	str	r0, [r2, #0]
 8001dec:	6053      	str	r3, [r2, #4]
 8001dee:	e7da      	b.n	8001da6 <_free_r+0x22>
 8001df0:	d902      	bls.n	8001df8 <_free_r+0x74>
 8001df2:	230c      	movs	r3, #12
 8001df4:	602b      	str	r3, [r5, #0]
 8001df6:	e7d6      	b.n	8001da6 <_free_r+0x22>
 8001df8:	6820      	ldr	r0, [r4, #0]
 8001dfa:	1821      	adds	r1, r4, r0
 8001dfc:	428b      	cmp	r3, r1
 8001dfe:	bf01      	itttt	eq
 8001e00:	6819      	ldreq	r1, [r3, #0]
 8001e02:	685b      	ldreq	r3, [r3, #4]
 8001e04:	1809      	addeq	r1, r1, r0
 8001e06:	6021      	streq	r1, [r4, #0]
 8001e08:	6063      	str	r3, [r4, #4]
 8001e0a:	6054      	str	r4, [r2, #4]
 8001e0c:	e7cb      	b.n	8001da6 <_free_r+0x22>
 8001e0e:	bd38      	pop	{r3, r4, r5, pc}
 8001e10:	200000fc 	.word	0x200000fc

08001e14 <_init>:
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	bf00      	nop
 8001e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e1a:	bc08      	pop	{r3}
 8001e1c:	469e      	mov	lr, r3
 8001e1e:	4770      	bx	lr

08001e20 <_fini>:
 8001e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e22:	bf00      	nop
 8001e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e26:	bc08      	pop	{r3}
 8001e28:	469e      	mov	lr, r3
 8001e2a:	4770      	bx	lr
